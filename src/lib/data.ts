
import type { User, Task, Game, Badge } from '@/lib/types';
import { PlaceHolderImages } from '@/lib/placeholder-images';
import { Swords, Bug, Puzzle, Keyboard, Eye, BrainCircuit, Gamepad2, Castle } from 'lucide-react';

export const user: User = {
  uid: '123',
  name: 'Alex',
  email: 'alex@example.com',
  avatarUrl: 'https://picsum.photos/seed/avatar/100/100',
  xp: 750,
  level: 5,
  xpToNextLevel: 1000,
  streak: 12,
  badges: [
    { id: '1', name: 'Python Pro', icon: PlaceHolderImages[0].imageUrl, description: 'Master of Python' },
    { id: '2', name: 'JS Master', icon: PlaceHolderImages[1].imageUrl, description: 'Wizard of the Web' },
    { id: '3', name: '5-Day Streak', icon: PlaceHolderImages[2].imageUrl, description: 'On Fire!' },
    { id: '4', name: 'First Challenge', icon: PlaceHolderImages[3].imageUrl, description: 'The Journey Begins' },
  ],
  completedTasks: [],
};

export const tasks: Task[] = [
    {
    id: '1',
    title: 'Reverse a String',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 50,
    description: 'Write a function that takes a string as input and returns the string reversed.',
    starterCode: {
      python: 'def reverse_string(s):\n  # Your code here\n  pass',
      javascript: 'function reverseString(s) {\n  // Your code here\n}',
      java: 'class Solution {\n  public String reverseString(String s) {\n    // Your code here\n  }\n}',
      cpp: '#include <string>\n#include <algorithm>\n\nstd::string reverseString(std::string s) {\n  // Your code here\n  return s;\n}',
    },
    examples: [
        { input: 's = "hello"', output: '"olleh"' },
        { input: 's = "CodeCraft"', output: '"tfarCedoC"' }
    ],
    constraints: ['The input string\'s length is between 1 and 10^5.'],
  },
  {
    id: '2',
    title: 'Two Sum',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice.',
    starterCode: {
        python: 'def two_sum(nums, target):\n  # Your code here\n  pass',
        javascript: 'function twoSum(nums, target) {\n  // Your code here\n}',
        java: 'class Solution {\n  public int[] twoSum(int[] nums, int target) {\n    // Your code here\n  }\n}',
        cpp: '#include <vector>\n\nstd::vector<int> twoSum(std::vector<int>& nums, int target) {\n  // Your code here\n}',
    },
    examples: [
        { input: 'nums = [2, 7, 11, 15], target = 9', output: '[0,1]', explanation: 'Because nums[0] + nums[1] == 9, we return [0, 1].' },
        { input: 'nums = [3, 2, 4], target = 6', output: '[1,2]' },
        { input: 'nums = [3, 3], target = 6', output: '[0,1]' },
    ],
    constraints: ['2 <= nums.length <= 10^4', '-10^9 <= nums[i] <= 10^9', '-10^9 <= target <= 10^9', 'Only one valid answer exists.'],
  },
    {
    id: '4',
    title: 'SQL Injection Prevention',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Refactor the given Python code to prevent SQL injection vulnerabilities. The function should safely query the database for a user by their username.',
    starterCode: {
      python: 'import sqlite3\n\n# Assume db connection is passed or created elsewhere\n# def get_user(db, username):\n#  cursor = db.cursor()\n#  # Vulnerable code below\n#  query = "SELECT * FROM users WHERE username = \'" + username + "\'"\n#  cursor.execute(query)\n#  return cursor.fetchone()\n\ndef get_user_safe(db, username):\n  # Your refactored, secure code here\n  pass',
      javascript: '// N/A for this challenge.',
      java: '// N/A for this challenge.',
      cpp: '// N/A for this challenge.',
    },
    examples: [],
    constraints: ['Use parameterized queries or prepared statements.'],
  },
  {
    id: '5',
    title: 'Valid Parentheses',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given a string s containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type.',
    starterCode: {
        python: 'def is_valid(s):\n  # Your code here\n  pass',
        javascript: 'function isValid(s) {\n  // Your code here\n}',
        java: 'class Solution {\n  public boolean isValid(String s) {\n    // Your code here\n  }\n}',
        cpp: '#include <string>\n#include <stack>\n\nbool isValid(std::string s) {\n  // Your code here\n}',
    },
    examples: [
        { input: 's = "()"', output: 'true' },
        { input: 's = "()[]{}"', output: 'true' },
        { input: 's = "(]"', output: 'false' },
    ],
    constraints: ['1 <= s.length <= 10^4', 's consists of parentheses only \'()[]{}\'.'],
  },
  {
    id: '6',
    title: 'Merge Two Sorted Lists',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'You are given the heads of two sorted linked lists list1 and list2. Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.',
    starterCode: {
        python: '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\ndef merge_two_lists(list1, list2):\n  # Your code here\n  pass',
        javascript: '/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\nfunction mergeTwoLists(list1, list2) {\n  // Your code here\n}',
        java: '/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n  public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n    // Your code here\n  }\n}',
        cpp: '/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'list1 = [1,2,4], list2 = [1,3,4]', output: '[1,1,2,3,4,4]' },
        { input: 'list1 = [], list2 = []', output: '[]' },
        { input: 'list1 = [], list2 = [0]', output: '[0]' },
    ],
    constraints: ['The number of nodes in both lists is in the range [0, 50].', '-100 <= Node.val <= 100', 'Both list1 and list2 are sorted in non-decreasing order.'],
  },
  {
    id: '7',
    title: 'Maximum Subarray',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 125,
    description: 'Given an integer array nums, find the subarray with the largest sum, and return its sum.',
    starterCode: {
        python: 'def max_subarray(nums):\n  # Your code here\n  pass',
        javascript: 'function maxSubArray(nums) {\n  // Your code here\n}',
        java: 'class Solution {\n    public int maxSubArray(int[] nums) {\n        // Your code here\n    }\n}',
        cpp: '#include <vector>\n#include <algorithm>\n\nint maxSubArray(std::vector<int>& nums) {\n    // Your code here\n}',
    },
    examples: [
        { input: 'nums = [-2,1,-3,4,-1,2,1,-5,4]', output: '6', explanation: 'The subarray [4,-1,2,1] has the largest sum 6.' },
        { input: 'nums = [1]', output: '1', explanation: 'The subarray [1] has the largest sum 1.' },
        { input: 'nums = [5,4,-1,7,8]', output: '23', explanation: 'The subarray [5,4,-1,7,8] has the largest sum 23.' },
    ],
    constraints: ['1 <= nums.length <= 10^5', '-10^4 <= nums[i] <= 10^4'],
  },
  {
    id: '8',
    title: 'Longest Substring Without Repeating Characters',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given a string `s`, find the length of the longest substring without repeating characters.',
    starterCode: {
      python: 'def length_of_longest_substring(s):\n  # Your code here\n  pass',
      javascript: 'function lengthOfLongestSubstring(s) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int lengthOfLongestSubstring(String s) {\n    // Your code here\n  }\n}',
      cpp: '#include <string>\n#include <unordered_map>\n\nint lengthOfLongestSubstring(std::string s) {\n  // Your code here\n}',
    },
    examples: [
      { input: 's = "abcabcbb"', output: '3', explanation: 'The answer is "abc", with the length of 3.' },
      { input: 's = "bbbbb"', output: '1', explanation: 'The answer is "b", with the length of 1.' },
      { input: 's = "pwwkew"', output: '3', explanation: 'The answer is "wke", with the length of 3. Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.' },
    ],
    constraints: ['0 <= s.length <= 5 * 10^4', 's consists of English letters, digits, symbols and spaces.'],
  },
  {
    id: '9',
    title: 'Maximum Depth of Binary Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given the root of a binary tree, return its maximum depth. A binary tree\'s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.',
    starterCode: {
      python: '# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\ndef max_depth(root):\n  # Your code here\n  pass',
      javascript: '/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\nfunction maxDepth(root) {\n  // Your code here\n}',
      java: '/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) { this.val = val; this.right = right; }\n * }\n */\nclass Solution {\n  public int maxDepth(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: '/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [3,9,20,null,null,15,7]', output: '3' },
      { input: 'root = [1,null,2]', output: '2' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 10^4].', '-100 <= Node.val <= 100'],
  },
  {
    id: '10',
    title: 'Climbing Stairs',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?',
    starterCode: {
      python: 'def climb_stairs(n):\n  # Your code here\n  pass',
      javascript: 'function climbStairs(n) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int climbStairs(int n) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int climbStairs(int n) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'n = 2', output: '2', explanation: 'There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps' },
      { input: 'n = 3', output: '3', explanation: 'There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step' },
    ],
    constraints: ['1 <= n <= 45'],
  },
  {
    id: '11',
    title: 'Linked List Cycle',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 100,
    description: 'Given `head`, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer.',
    starterCode: {
        python: '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\ndef has_cycle(head):\n  # Your code here\n  pass',
        javascript: '/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\nfunction hasCycle(head) {\n  // Your code here\n};',
        java: '/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        // Your code here\n    }\n}',
        cpp: '/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'head = [3,2,0,-4], pos = 1', output: 'true', explanation: 'There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).' },
        { input: 'head = [1,2], pos = 0', output: 'true', explanation: 'There is a cycle in the linked list, where the tail connects to the 0th node.' },
        { input: 'head = [1], pos = -1', output: 'false', explanation: 'There is no cycle in the linked list.' },
    ],
    constraints: ['The number of the nodes in the list is in the range [0, 10^4].', '-10^5 <= Node.val <= 10^5', 'pos is -1 or a valid index in the linked-list.'],
  },
  {
    id: '12',
    title: 'Invert Binary Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given the root of a binary tree, invert the tree, and return its root.',
    starterCode: {
      python: '# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\ndef invert_tree(root):\n  # Your code here\n  pass',
      javascript: '/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = val;\n *     this.left = left;\n *     this.right = right;\n * }\n */\nfunction invertTree(root) {\n  // Your code here\n}',
      java: '/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) { this.val = val; this.right = right; }\n * }\n */\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n        // Your code here\n    }\n}',
      cpp: '/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'root = [4,2,7,1,3,6,9]', output: '[4,7,2,9,6,3,1]' },
        { input: 'root = [2,1,3]', output: '[2,3,1]' },
        { input: 'root = []', output: '[]' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 100].', '-100 <= Node.val <= 100'],
  },
  {
    id: '13',
    title: 'Kth Largest Element in an Array',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an integer array `nums` and an integer `k`, return the `k`th largest element in the array. Note that it is the `k`th largest element in the sorted order, not the `k`th distinct element.',
    starterCode: {
      python: 'def find_kth_largest(nums, k):\n  # Your code here\n  pass',
      javascript: 'function findKthLargest(nums, k) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int findKthLargest(int[] nums, int k) {\n    // Your code here\n  }\n}',
      cpp: '#include <vector>\n\nclass Solution {\npublic:\n    int findKthLargest(std::vector<int>& nums, int k) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [3,2,1,5,6,4], k = 2', output: '5' },
      { input: 'nums = [3,2,3,1,2,4,5,5,6], k = 4', output: '4' },
    ],
    constraints: ['1 <= k <= nums.length <= 10^5', '-10^4 <= nums[i] <= 10^4'],
  },
  {
    id: '14',
    title: 'Number of Islands',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 200,
    description: 'Given an `m x n` 2D binary grid `grid` which represents a map of `\'1\'`s (land) and `\'0\'`s (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.',
    starterCode: {
      python: 'def num_islands(grid):\n  # Your code here\n  pass',
      javascript: 'function numIslands(grid) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int numIslands(char[][] grid) {\n    // Your code here\n  }\n}',
      cpp: '#include <vector>\n\nclass Solution {\npublic:\n    int numIslands(std::vector<std::vector<char>>& grid) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'grid = [\n  ["1","1","1","1","0"],\n  ["1","1","0","1","0"],\n  ["1","1","0","0","0"],\n  ["0","0","0","0","0"]\n]', output: '1' },
      { input: 'grid = [\n  ["1","1","0","0","0"],\n  ["1","1","0","0","0"],\n  ["0","0","1","0","0"],\n  ["0","0","0","1","1"]\n]', output: '3' },
    ],
    constraints: ['m == grid.length', 'n == grid[i].length', '1 <= m, n <= 300', 'grid[i][j] is \'0\' or \'1\'.'],
  },
  {
    id: '15',
    title: 'Product of Array Except Self',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`. The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer. You must write an algorithm that runs in O(n) time and without using the division operation.',
    starterCode: {
      python: 'def product_except_self(nums):\n  # Your code here\n  pass',
      javascript: 'function productExceptSelf(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int[] productExceptSelf(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: '#include <vector>\n\nclass Solution {\npublic:\n    std::vector<int> productExceptSelf(std::vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,3,4]', output: '[24,12,8,6]' },
      { input: 'nums = [-1,1,0,-3,3]', output: '[0,0,9,0,0]' },
    ],
    constraints: ['2 <= nums.length <= 10^5', '-30 <= nums[i] <= 30', 'The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.'],
  },
  {
    id: '16',
    title: 'Validate Binary Search Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given the `root` of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node\'s key. The right subtree of a node contains only nodes with keys greater than the node\'s key. Both the left and right subtrees must also be binary search trees.',
    starterCode: {
      python: '# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\ndef is_valid_bst(root):\n  # Your code here\n  pass',
      javascript: '/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\nfunction isValidBST(root) {\n  // Your code here\n}',
      java: '/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) { this.val = val; this.right = right; }\n * }\n */\nclass Solution {\n  public boolean isValidBST(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: '/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [2,1,3]', output: 'true' },
      { input: 'root = [5,1,4,null,null,3,6]', output: 'false', explanation: 'The root node\'s value is 5 but its right child\'s value is 4.' },
    ],
    constraints: ['The number of nodes in the tree is in the range [1, 10^4].', '-2^31 <= Node.val <= 2^31 - 1'],
  },
  {
    id: '17',
    title: 'Container With Most Water',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `i`th line are `(i, 0)` and `(i, height[i])`. Find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store.',
    starterCode: {
      python: 'def max_area(height):\n  # Your code here\n  pass',
      javascript: 'function maxArea(height) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int maxArea(int[] height) {\n    // Your code here\n  }\n}',
      cpp: '#include <vector>\n\nclass Solution {\npublic:\n    int maxArea(std::vector<int>& height) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'height = [1,8,6,2,5,4,8,3,7]', output: '49', explanation: 'The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.' },
      { input: 'height = [1,1]', output: '1' },
    ],
    constraints: ['n == height.length', '2 <= n <= 10^5', '0 <= height[i] <= 10^4'],
  },
  {
    id: '18',
    title: 'Longest Palindromic Substring',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given a string `s`, return the longest palindromic substring in `s`.',
    starterCode: {
        python: 'def longest_palindrome(s):\n  # Your code here\n  pass',
        javascript: 'function longestPalindrome(s) {\n    // Your code here\n}',
        java: 'class Solution {\n    public String longestPalindrome(String s) {\n        // Your code here\n    }\n}',
        cpp: 'class Solution {\npublic:\n    string longestPalindrome(string s) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 's = "babad"', output: '"bab"', explanation: '"aba" is also a valid answer.' },
        { input: 's = "cbbd"', output: '"bb"' },
    ],
    constraints: ['1 <= s.length <= 1000', 's consist of only digits and English letters.'],
  },
  {
    id: '19',
    title: '3Sum',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given an integer array `nums`, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`. Notice that the solution set must not contain duplicate triplets.',
    starterCode: {
        python: 'def three_sum(nums):\n  # Your code here\n  pass',
        javascript: 'function threeSum(nums) {\n    // Your code here\n}',
        java: 'class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        // Your code here\n    }\n}',
        cpp: 'class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'nums = [-1,0,1,2,-1,-4]', output: '[[-1,-1,2],[-1,0,1]]' },
        { input: 'nums = [0,1,1]', output: '[]' },
        { input: 'nums = [0,0,0]', output: '[[0,0,0]]' },
    ],
    constraints: ['3 <= nums.length <= 3000', '-10^5 <= nums[i] <= 10^5'],
  },
  {
    id: '20',
    title: 'Binary Tree Inorder Traversal',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given the root of a binary tree, return the inorder traversal of its nodes\' values.',
    starterCode: {
        python: '# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\ndef inorder_traversal(root):\n  # Your code here\n  pass',
        javascript: 'function inorderTraversal(root) {\n    // Your code here\n}',
        java: 'class Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        // Your code here\n    }\n}',
        cpp: 'class Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'root = [1,null,2,3]', output: '[1,3,2]' },
        { input: 'root = []', output: '[]' },
        { input: 'root = [1]', output: '[1]' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 100].', '-100 <= Node.val <= 100'],
  },
  {
    id: '21',
    title: 'Word Break',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 225,
    description: 'Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation.',
    starterCode: {
        python: 'def word_break(s, word_dict):\n  # Your code here\n  pass',
        javascript: 'function wordBreak(s, wordDict) {\n    // Your code here\n}',
        java: 'class Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        // Your code here\n    }\n}',
        cpp: 'class Solution {\npublic:\n    bool wordBreak(string s, vector<string>& wordDict) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 's = "leetcode", wordDict = ["leet","code"]', output: 'true', explanation: 'Return true because "leetcode" can be segmented as "leet code".' },
        { input: 's = "applepenapple", wordDict = ["apple","pen"]', output: 'true', explanation: 'Return true because "applepenapple" can be segmented as "apple pen apple".' },
        { input: 's = "catsandog", wordDict = ["cats","dog","sand","and","cat"]', output: 'false' },
    ],
    constraints: ['1 <= s.length <= 300', '1 <= wordDict.length <= 1000', '1 <= wordDict[i].length <= 20', 's and wordDict[i] consist of only lowercase English letters.', 'All the strings of wordDict are unique.'],
  },
  {
    id: '22',
    title: 'Coin Change',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 200,
    description: 'You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin.',
    starterCode: {
        python: 'def coin_change(coins, amount):\n  # Your code here\n  pass',
        javascript: 'function coinChange(coins, amount) {\n    // Your code here\n}',
        java: 'class Solution {\n    public int coinChange(int[] coins, int amount) {\n        // Your code here\n    }\n}',
        cpp: 'class Solution {\npublic:\n    int coinChange(vector<int>& coins, int amount) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'coins = [1,2,5], amount = 11', output: '3', explanation: '11 = 5 + 5 + 1' },
        { input: 'coins = [2], amount = 3', output: '-1' },
        { input: 'coins = [1], amount = 0', output: '0' },
    ],
    constraints: ['1 <= coins.length <= 12', '1 <= coins[i] <= 2^31 - 1', '0 <= amount <= 10^4'],
  },
  {
    id: '23',
    title: 'LRU Cache',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 250,
    description: 'Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. Implement the `LRUCache` class: `LRUCache(int capacity)` initializes the LRU cache with positive size capacity. `int get(int key)` returns the value of the key if the key exists, otherwise returns -1. `void put(int key, int value)` updates the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.',
    starterCode: {
        python: 'class LRUCache:\n\n    def __init__(self, capacity: int):\n        # your code here\n        pass\n\n    def get(self, key: int) -> int:\n        # your code here\n        pass\n\n    def put(self, key: int, value: int) -> None:\n        # your code here\n        pass\n',
        javascript: 'class LRUCache {\n    constructor(capacity) {\n        // your code here\n    }\n\n    get(key) {\n        // your code here\n    }\n\n    put(key, value) {\n        // your code here\n    }\n}',
        java: 'class LRUCache {\n    public LRUCache(int capacity) {\n        // your code here\n    }\n    \n    public int get(int key) {\n        // your code here\n    }\n    \n    public void put(int key, int value) {\n        // your code here\n    }\n}',
        cpp: 'class LRUCache {\npublic:\n    LRUCache(int capacity) {\n        // your code here\n    }\n    \n    int get(int key) {\n        // your code here\n    }\n    \n    void put(int key, int value) {\n        // your code here\n    }\n};',
    },
    examples: [],
    constraints: ['1 <= capacity <= 3000', '0 <= key <= 10^4', '0 <= value <= 10^5', 'At most 2 * 10^5 calls will be made to get and put.'],
  },
  {
    id: '24',
    title: 'Implement Trie (Prefix Tree)',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 200,
    description: 'A trie or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. Implement the Trie class.',
    starterCode: {
        python: 'class Trie:\n\n    def __init__(self):\n        # your code here\n        pass\n\n    def insert(self, word: str) -> None:\n        # your code here\n        pass\n\n    def search(self, word: str) -> bool:\n        # your code here\n        pass\n\n    def startsWith(self, prefix: str) -> bool:\n        # your code here\n        pass\n',
        javascript: 'class Trie {\n    constructor() {\n        // your code here\n    }\n\n    insert(word) {\n        // your code here\n    }\n\n    search(word) {\n        // your code here\n    }\n\n    startsWith(prefix) {\n        // your code here\n    }\n}',
        java: 'class Trie {\n    public Trie() {\n        // your code here\n    }\n    \n    public void insert(String word) {\n        // your code here\n    }\n    \n    public boolean search(String word) {\n        // your code here\n    }\n    \n    public boolean startsWith(String prefix) {\n        // your code here\n    }\n}',
        cpp: 'class Trie {\npublic:\n    Trie() {\n        // your code here\n    }\n    \n    void insert(string word) {\n        // your code here\n    }\n    \n    bool search(string word) {\n        // your code here\n    }\n    \n    bool startsWith(string prefix) {\n        // your code here\n    }\n};',
    },
    examples: [],
    constraints: ['1 <= word.length, prefix.length <= 2000', 'word and prefix consist only of lowercase English letters.', 'At most 3 * 10^4 calls will be made to insert, search, and startsWith.'],
  },
  {
    id: '25',
    title: 'Course Schedule',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 225,
    description: 'There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. Return true if you can finish all courses. Otherwise, return false.',
    starterCode: {
        python: 'def can_finish(num_courses, prerequisites):\n  # Your code here\n  pass',
        javascript: 'function canFinish(numCourses, prerequisites) {\n    // Your code here\n}',
        java: 'class Solution {\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        // Your code here\n    }\n}',
        cpp: 'class Solution {\npublic:\n    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'numCourses = 2, prerequisites = [[1,0]]', output: 'true', explanation: 'There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.' },
        { input: 'numCourses = 2, prerequisites = [[1,0],[0,1]]', output: 'false', explanation: 'There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.' },
    ],
    constraints: ['1 <= numCourses <= 2000', '0 <= prerequisites.length <= 5000', 'prerequisites[i].length == 2', '0 <= ai, bi < numCourses', 'All the pairs prerequisites[i] are unique.'],
  },
  {
    id: '26',
    title: 'Group Anagrams',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an array of strings `strs`, group the anagrams together. You can return the answer in any order.',
    starterCode: {
      python: 'def group_anagrams(strs):\n  # Your code here\n  pass',
      javascript: 'function groupAnagrams(strs) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<List<String>> groupAnagrams(String[] strs) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'strs = ["eat","tea","tan","ate","nat","bat"]', output: '[["bat"],["nat","tan"],["ate","eat","tea"]]' },
      { input: 'strs = [""]', output: '[[""]]' },
      { input: 'strs = ["a"]', output: '[["a"]]' },
    ],
    constraints: ['1 <= strs.length <= 10^4', '0 <= strs[i].length <= 100', 'strs[i] consists of lowercase English letters.'],
  },
  {
    id: '27',
    title: 'Rotate Image',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'You are given an `n x n` 2D `matrix` representing an image. Rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.',
    starterCode: {
      python: 'def rotate(matrix):\n  # Your code here, modify matrix in-place.\n  pass',
      javascript: 'function rotate(matrix) {\n  // Your code here, modify matrix in-place.\n}',
      java: 'class Solution {\n  public void rotate(int[][] matrix) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'matrix = [[1,2,3],[4,5,6],[7,8,9]]', output: '[[7,4,1],[8,5,2],[9,6,3]]' },
      { input: 'matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]', output: '[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]' },
    ],
    constraints: ['matrix.length == n', 'matrix[i].length == n', '1 <= n <= 20', '-1000 <= matrix[i][j] <= 1000'],
  },
  {
    id: '28',
    title: 'Search in Rotated Sorted Array',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'There is an integer array `nums` sorted in ascending order (with distinct values). Prior to being passed to your function, `nums` is possibly rotated at an unknown pivot index `k`. Given the array `nums` after the possible rotation and an integer `target`, return the index of `target` if it is in `nums`, or -1 if it is not in `nums`. You must write an algorithm with O(log n) runtime complexity.',
    starterCode: {
      python: 'def search(nums, target):\n  # Your code here\n  pass',
      javascript: 'function search(nums, target) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int search(int[] nums, int target) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [4,5,6,7,0,1,2], target = 0', output: '4' },
      { input: 'nums = [4,5,6,7,0,1,2], target = 3', output: '-1' },
      { input: 'nums = [1], target = 0', output: '-1' },
    ],
    constraints: ['1 <= nums.length <= 5000', '-10^4 <= nums[i] <= 10^4', 'All values of nums are unique.', 'nums is an ascending array that is possibly rotated.', '-10^4 <= target <= 10^4'],
  },
  {
    id: '29',
    title: 'Minimum Window Substring',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 275,
    description: 'Given two strings `s` and `t` of lengths `m` and `n` respectively, return the minimum window substring of `s` such that every character in `t` (including duplicates) is included in the window. If there is no such substring, return the empty string `""`.',
    starterCode: {
      python: 'def min_window(s, t):\n  # Your code here\n  pass',
      javascript: 'function minWindow(s, t) {\n  // Your code here\n}',
      java: 'class Solution {\n  public String minWindow(String s, String t) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    string minWindow(string s, string t) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "ADOBECODEBANC", t = "ABC"', output: '"BANC"' },
      { input: 's = "a", t = "a"', output: '"a"' },
      { input: 's = "a", t = "aa"', output: '""' },
    ],
    constraints: ['m == s.length', 'n == t.length', '1 <= m, n <= 10^5', 's and t consist of uppercase and lowercase English letters.'],
  },
  {
    id: '30',
    title: 'Serialize and Deserialize Binary Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. Design an algorithm to serialize and deserialize a binary tree.',
    starterCode: {
      python: '# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        """Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        """\n        \n\n    def deserialize(self, data):\n        """Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        """\n',
      javascript: '/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n    \n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n    \n};',
      java: '/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        \n    }\n}',
      cpp: '/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        \n    }\n};',
    },
    examples: [
      { input: 'root = [1,2,3,null,null,4,5]', output: '[1,2,3,null,null,4,5]' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 10^4].', '0 <= Node.val <= 1000', 'The same as the input tree.'],
  },
  {
    id: '31',
    title: 'Trapping Rain Water',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'Given `n` non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.',
    starterCode: {
      python: 'def trap(height):\n  # Your code here\n  pass',
      javascript: 'function trap(height) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int trap(int[] height) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int trap(vector<int>& height) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'height = [0,1,0,2,1,0,1,3,2,1,2,1]', output: '6' },
      { input: 'height = [4,2,0,3,2,5]', output: '9' },
    ],
    constraints: ['n == height.length', '1 <= n <= 2 * 10^4', '0 <= height[i] <= 10^5'],
  },
  {
    id: '32',
    title: 'Merge Intervals',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.',
    starterCode: {
      python: 'def merge(intervals):\n  # Your code here\n  pass',
      javascript: 'function merge(intervals) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int[][] merge(int[][] intervals) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'intervals = [[1,3],[2,6],[8,10],[15,18]]', output: '[[1,6],[8,10],[15,18]]' },
      { input: 'intervals = [[1,4],[4,5]]', output: '[[1,5]]' },
    ],
    constraints: ['1 <= intervals.length <= 10^4', 'intervals[i].length == 2', '0 <= starti <= endi <= 10^4'],
  },
  {
    id: '33',
    title: 'Lowest Common Ancestor of a BST',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.',
    starterCode: {
      python: '# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\ndef lowest_common_ancestor(root, p, q):\n  # Your code here\n  pass',
      javascript: 'function lowestCommonAncestor(root, p, q) {\n  // Your code here\n}',
      java: 'class Solution {\n  public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8', output: '6' },
      { input: 'root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4', output: '2' },
    ],
    constraints: ['The number of nodes in the tree is in the range [2, 10^5].', '-10^9 <= Node.val <= 10^9', 'All Node.val are unique.', 'p != q', 'p and q will exist in the BST.'],
  },
  {
    id: '34',
    title: 'Debounced Input Handler',
    category: 'Web Development',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Implement a debounce function in JavaScript. The function should take another function and a delay time as arguments. When the debounced function is called, it should not execute the original function until the specified delay has passed without any new calls.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: 'function debounce(func, delay) {\n  // Your code here\n}\n\n// Example usage:\n// const debouncedLog = debounce(() => console.log("Hello"), 1000);\n// debouncedLog();\n// debouncedLog();',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: 'Calling debounced function multiple times in quick succession', output: 'The wrapped function is only called once after the delay.', explanation: 'If a debounced function is called every 100ms with a 500ms delay, the inner function will only execute once, 500ms after the last call.'}
    ],
    constraints: ['Must be implemented in plain JavaScript.', 'Should handle any number of arguments passed to the original function.'],
  },
  {
    id: '35',
    title: 'Secure Password Hashing',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Write a Python function that takes a plain-text password and returns a securely hashed password using a modern, salted hashing algorithm like bcrypt. Also write a function to verify a password against a hash.',
    starterCode: {
      python: "import bcrypt\n\ndef hash_password(plain_text_password):\n  # Your code here to generate a salt and hash the password\n  pass\n\ndef check_password(plain_text_password, hashed_password):\n  # Your code here to check the password against the hash\n  pass",
      javascript: '// N/A for this challenge. Please use Python.',
      java: '// N/A for this challenge. Please use Python.',
      cpp: '// N/A for this challenge. Please use Python.',
    },
    examples: [
      { input: 'password = "mySuperSecretPa$$w0rd"', output: 'A valid bcrypt hash string (output will vary)', explanation: 'The hash must be generated with a random salt each time.'}
    ],
    constraints: ['Must use the `bcrypt` library.', 'The hash must be properly salted.'],
  },
  {
    id: '36',
    title: 'Calculate Precision and Recall',
    category: 'AI/ML',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Implement a Python function that calculates precision and recall for a binary classification model, given the number of true positives (TP), false positives (FP), and false negatives (FN).',
    starterCode: {
      python: 'def calculate_metrics(tp, fp, fn):\n  """\n  Calculates precision and recall.\n  Returns a tuple of (precision, recall).\n  Handle the case where the denominator is zero.\n  """\n  # Your code here\n  pass',
      javascript: '// N/A for this challenge.',
      java: '// N/A for this challenge.',
      cpp: '// N/A for this challenge.',
    },
    examples: [
      { input: 'tp=50, fp=10, fn=20', output: '(0.833, 0.714)', explanation: 'Precision = TP / (TP + FP) = 50/60. Recall = TP / (TP + FN) = 50/70.' },
      { input: 'tp=0, fp=0, fn=0', output: '(0.0, 0.0)', explanation: 'If there are no predictions or actual positives, metrics are 0.'}
    ],
    constraints: ['Return precision and recall rounded to 3 decimal places.', 'If a denominator is zero, the corresponding metric should be 0.0.'],
  },
  {
    id: '37',
    title: 'Longest Consecutive Sequence',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 200,
    description: 'Given an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence. You must write an algorithm that runs in O(n) time.',
    starterCode: {
      python: 'def longest_consecutive(nums):\n  # Your code here\n  pass',
      javascript: 'function longestConsecutive(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int longestConsecutive(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int longestConsecutive(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [100,4,200,1,3,2]', output: '4', explanation: 'The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.' },
      { input: 'nums = [0,3,7,2,5,8,4,6,0,1]', output: '9' },
    ],
    constraints: ['0 <= nums.length <= 10^5', '-10^9 <= nums[i] <= 10^9'],
  },
  {
    id: '38',
    title: 'XSS Prevention in React',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'You are given a React component that dangerously renders HTML from an untrusted source. Refactor it to prevent Cross-Site Scripting (XSS) attacks while still displaying the content safely.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: "import React from 'react';\n\n// Unsafe component\n// const UnsafeComponent = ({ content }) => {\n//   return <div dangerouslySetInnerHTML={{ __html: content }} />;\n// };\n\n// Your safe component here\nconst SafeComponent = ({ content }) => {\n  // Your code here to render content safely\n  return <div />;\n};\n\n// Example untrusted content:\n// const maliciousContent = 'Hello, world! <img src=x onerror=alert(\"XSS_ATTACK\") />';",
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: "content = '<b>Hello</b>'", output: "Renders the text '<b>Hello</b>' literally, not as bold text." },
      { input: "content = '<script>alert(1)</script>'", output: "Renders the script tag as plain text, preventing its execution." }
    ],
    constraints: ['Do not use `dangerouslySetInnerHTML`.', 'The solution should prevent any script execution from the `content` prop.'],
  },
  {
    id: '39',
    title: 'Palindrome Number',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 50,
    description: 'Given an integer x, return true if x is a palindrome, and false otherwise.',
    starterCode: {
      python: 'def is_palindrome(x):\n  # Your code here\n  pass',
      javascript: 'function isPalindrome(x) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean isPalindrome(int x) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool isPalindrome(int x) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'x = 121', output: 'true' },
      { input: 'x = -121', output: 'false' },
      { input: 'x = 10', output: 'false' },
    ],
    constraints: ['-2^31 <= x <= 2^31 - 1'],
  },
  {
    id: '40',
    title: 'Roman to Integer',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given a roman numeral, convert it to an integer.',
    starterCode: {
      python: 'def roman_to_int(s):\n  # Your code here\n  pass',
      javascript: 'function romanToInt(s) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int romanToInt(String s) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int romanToInt(string s) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "III"', output: '3' },
      { input: 's = "LVIII"', output: '58' },
      { input: 's = "MCMXCIV"', output: '1994' },
    ],
    constraints: ['1 <= s.length <= 15', 's contains only the characters (\'I\', \'V\', \'X\', \'L\', \'C\', \'D\', \'M\').', 'It is guaranteed that s is a valid roman numeral in the range [1, 3999].'],
  },
  {
    id: '41',
    title: 'Best Time to Buy and Sell Stock',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'You are given an array `prices` where `prices[i]` is the price of a given stock on the `i`th day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.',
    starterCode: {
      python: 'def max_profit(prices):\n  # Your code here\n  pass',
      javascript: 'function maxProfit(prices) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int maxProfit(int[] prices) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'prices = [7,1,5,3,6,4]', output: '5', explanation: 'Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.' },
      { input: 'prices = [7,6,4,3,1]', output: '0', explanation: 'In this case, no transactions are done and the max profit is 0.' },
    ],
    constraints: ['1 <= prices.length <= 10^5', '0 <= prices[i] <= 10^4'],
  },
  {
    id: '42',
    title: 'Symmetric Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).',
    starterCode: {
      python: 'def is_symmetric(root):\n  # Your code here\n  pass',
      javascript: 'function isSymmetric(root) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean isSymmetric(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [1,2,2,3,4,4,3]', output: 'true' },
      { input: 'root = [1,2,2,null,3,null,3]', output: 'false' },
    ],
    constraints: ['The number of nodes in the tree is in the range [1, 1000].', '-100 <= Node.val <= 100'],
  },
  {
    id: '43',
    title: 'Subsets',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an integer array `nums` of unique elements, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.',
    starterCode: {
      python: 'def subsets(nums):\n  # Your code here\n  pass',
      javascript: 'function subsets(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<List<Integer>> subsets(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,3]', output: '[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]' },
      { input: 'nums = [0]', output: '[[],[0]]' },
    ],
    constraints: ['1 <= nums.length <= 10', '-10 <= nums[i] <= 10', 'All the numbers of `nums` are unique.'],
  },
  {
    id: '44',
    title: 'Construct Binary Tree from Preorder and Inorder Traversal',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return the binary tree.',
    starterCode: {
      python: 'def build_tree(preorder, inorder):\n  # Your code here\n  pass',
      javascript: 'function buildTree(preorder, inorder) {\n  // Your code here\n}',
      java: 'class Solution {\n  public TreeNode buildTree(int[] preorder, int[] inorder) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]', output: '[3,9,20,null,null,15,7]' },
      { input: 'preorder = [-1], inorder = [-1]', output: '[-1]' },
    ],
    constraints: ['1 <= preorder.length <= 3000', 'inorder.length == preorder.length', '-3000 <= preorder[i], inorder[i] <= 3000', 'preorder and inorder consist of unique values.', 'Each value of inorder also appears in preorder.', 'preorder is guaranteed to be the preorder traversal of the tree.', 'inorder is guaranteed to be the inorder traversal of the tree.'],
  },
  {
    id: '45',
    title: 'Find Median from Data Stream',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'The median is the middle value in an ordered integer list. Implement the MedianFinder class.',
    starterCode: {
      python: 'class MedianFinder:\n\n    def __init__(self):\n        \n\n    def addNum(self, num: int) -> None:\n        \n\n    def findMedian(self) -> float:\n        \n',
      javascript: 'class MedianFinder {\n    constructor() {}\n    addNum(num) {}\n    findMedian() {}\n}',
      java: 'class MedianFinder {\n\n    public MedianFinder() {\n        \n    }\n    \n    public void addNum(int num) {\n        \n    }\n    \n    public double findMedian() {\n        \n    }\n}',
      cpp: 'class MedianFinder {\npublic:\n    MedianFinder() {\n        \n    }\n    \n    void addNum(int num) {\n        \n    }\n    \n    double findMedian() {\n        \n    }\n};',
    },
    examples: [
      { input: '["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]\n[[], [1], [2], [], [3], []]', output: '[null, null, null, 1.5, null, 2.0]' },
    ],
    constraints: ['-10^5 <= num <= 10^5', 'There will be at least one element in the data structure before calling findMedian.', 'At most 5 * 10^4 calls will be made to addNum and findMedian.'],
  },
  {
    id: '46',
    title: 'Word Ladder',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 275,
    description: 'A transformation sequence from word `beginWord` to `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that every adjacent pair of words differs by a single letter. Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return the number of words in the shortest transformation sequence from `beginWord` to `endWord`, or 0 if no such sequence exists.',
    starterCode: {
      python: 'def ladder_length(beginWord, endWord, wordList):\n  # Your code here\n  pass',
      javascript: 'function ladderLength(beginWord, endWord, wordList) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]', output: '5' },
      { input: 'beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]', output: '0' },
    ],
    constraints: ['1 <= beginWord.length <= 10', 'endWord.length == beginWord.length', '1 <= wordList.length <= 5000', 'wordList[i].length == beginWord.length', 'beginWord, endWord, and wordList[i] consist of lowercase English letters.', 'beginWord != endWord', 'All the words in wordList are unique.'],
  },
  {
    id: '47',
    title: 'Binary Tree Maximum Path Sum',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root. The path sum of a path is the sum of the node\'s values in the path. Given the `root` of a binary tree, return the maximum path sum of any non-empty path.',
    starterCode: {
      python: 'def max_path_sum(root):\n  # Your code here\n  pass',
      javascript: 'function maxPathSum(root) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int maxPathSum(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'root = [1,2,3]', output: '6' },
        { input: 'root = [-10,9,20,null,null,15,7]', output: '42' },
    ],
    constraints: ['The number of nodes in the tree is in the range [1, 3 * 10^4].', '-1000 <= Node.val <= 1000'],
  },
  {
    id: '48',
    title: 'Regular Expression Matching',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'Given an input string `s` and a pattern `p`, implement regular expression matching with support for \'.\' and \'*\'. \'.\' Matches any single character. \'*\' Matches zero or more of the preceding element.',
    starterCode: {
      python: 'def is_match(s, p):\n  # Your code here\n  pass',
      javascript: 'function isMatch(s, p) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean isMatch(String s, String p) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "aa", p = "a"', output: 'false' },
      { input: 's = "aa", p = "a*"', output: 'true' },
      { input: 's = "ab", p = ".*"', output: 'true' },
    ],
    constraints: ['1 <= s.length <= 20', '1 <= p.length <= 20', 's contains only lowercase English letters.', 'p contains only lowercase English letters, \'.\', and \'*\'.', 'It is guaranteed for each appearance of the character \'*\', there will be a previous valid character to match.'],
  },
  {
    id: '49',
    title: 'Merge k Sorted Lists',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 275,
    description: 'You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.',
    starterCode: {
      python: 'def merge_k_lists(lists):\n  # Your code here\n  pass',
      javascript: 'function mergeKLists(lists) {\n  // Your code here\n}',
      java: 'class Solution {\n  public ListNode mergeKLists(ListNode[] lists) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    ListNode* mergeKLists(ListNode* lists) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'lists = [[1,4,5],[1,3,4],[2,6]]', output: '[1,1,2,3,4,4,5,6]' },
      { input: 'lists = []', output: '[]' },
      { input: 'lists = [[]]', output: '[]' },
    ],
    constraints: ['k == lists.length', '0 <= k <= 10^4', '0 <= lists[i].length <= 500', '-10^4 <= lists[i][j] <= 10^4', 'lists[i] is sorted in ascending order.', 'The sum of lists[i].length will not exceed 10^4.'],
  },
  {
    id: '50',
    title: 'Create a Custom React Hook for Fetching Data',
    category: 'Web Development',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Create a custom React hook `useFetch` that takes a URL as an argument and returns the fetched data, a loading state, and an error state. This hook should handle the entire lifecycle of a fetch request.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: "import { useState, useEffect } from 'react';\n\nfunction useFetch(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Your code here\n\n  return { data, loading, error };\n}\n\n// Example Usage:\n// function MyComponent() {\n//   const { data, loading, error } = useFetch('https://api.example.com/data');\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>Error!</p>;\n//   return <pre>{JSON.stringify(data)}</pre>;\n// }",
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['The hook must manage loading and error states.', 'It should re-fetch data if the URL changes.', 'Use the `useEffect` and `useState` hooks.'],
  },
  {
    id: '51',
    title: 'Build a Simple Tabs Component in React',
    category: 'Web Development',
    difficulty: 'Beginner',
    xp: 125,
    description: 'Create a reusable `Tabs` component in React. The component should take an array of tab items (each with a label and content) and display them correctly. Only the content of the active tab should be visible.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: "import React, { useState } from 'react';\n\n// items is an array of objects: [{ label: 'Tab 1', content: 'Content 1' }, ...]\nfunction Tabs({ items }) {\n  // Your code here\n  \n  return (\n    <div>\n      {/* Render tab buttons here */}\n      <div>\n        {/* Render active tab content here */}\n      </div>\n    </div>\n  );\n}",
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Clicking a tab label should switch the visible content.', 'The component should have a clear state for the active tab index.'],
  },
  {
    id: '52',
    title: 'Implement a Rate Limiter',
    category: 'Cybersecurity',
    difficulty: 'Advanced',
    xp: 250,
    description: 'Implement a simple in-memory rate limiter in Python. The function should limit the number of requests from a single IP address to a certain number per minute.',
    starterCode: {
      python: "import time\n\nclass RateLimiter:\n    def __init__(self, requests_per_minute):\n        self.requests_per_minute = requests_per_minute\n        self.timestamps = {}\n\n    def is_allowed(self, ip_address):\n        # Your code here to check if the request is allowed\n        pass\n",
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: 'limiter = RateLimiter(5); limiter.is_allowed("1.2.3.4") # Call 6 times in a minute', output: 'The first 5 calls return True, the 6th returns False.'}
    ],
    constraints: ['Must track timestamps of requests for each IP.', 'Old timestamps (older than 1 minute) should be discarded.'],
  },
  {
    id: '53',
    title: 'Content Security Policy (CSP) Setup',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Describe how you would set up a Content Security Policy (CSP) for a web application to only allow scripts from its own domain and from `apis.google.com`. What would the HTTP header look like?',
    starterCode: {
      python: "# Provide the answer as a comment\n# HTTP Header:",
      javascript: "// Provide the answer as a comment\n// HTTP Header:",
      java: "// Provide the answer as a comment\n// HTTP Header:",
      cpp: "// Provide the answer as a comment\n// HTTP Header:",
    },
    examples: [
      { input: 'Requirement: Allow scripts from self and apis.google.com', output: "Content-Security-Policy: script-src 'self' apis.google.com;"}
    ],
    constraints: ['Your answer should be the value of the `Content-Security-Policy` header.'],
  },
  {
    id: '54',
    title: 'Implement Gradient Descent',
    category: 'AI/ML',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Implement the gradient descent algorithm from scratch in Python to find the minimum of a simple quadratic function, `f(x) = x^2`. The function should take a starting point, learning rate, and number of iterations as input.',
    starterCode: {
      python: 'def gradient_descent(start_x, learning_rate, n_iterations):\n  """\n  Performs gradient descent to find the minimum of f(x) = x^2.\n  The derivative of x^2 is 2x.\n  """\n  x = start_x\n  # Your code here\n  \n  return x',
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: 'start_x=10, learning_rate=0.1, n_iterations=50', output: 'A value very close to 0.0' }
    ],
    constraints: ['The update rule for gradient descent is: x = x - learning_rate * gradient.'],
  },
  {
    id: '55',
    title: 'K-Means Clustering from Scratch',
    category: 'AI/ML',
    difficulty: 'Advanced',
    xp: 250,
    description: 'Implement the K-Means clustering algorithm in Python. Your function should take a dataset (as a list of lists/numpy array) and the number of clusters (k) as input. It should return the final centroids and the cluster assignments for each data point.',
    starterCode: {
      python: 'import random\nimport numpy as np\n\ndef k_means(data, k, max_iterations=100):\n  # 1. Initialize centroids randomly\n  \n  # 2. Loop for max_iterations:\n  #    a. Assign points to the nearest centroid\n  #    b. Update centroids to be the mean of assigned points\n  \n  # Your code here\n  pass',
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Your implementation should handle 2D data points.', 'You will need functions to calculate Euclidean distance.'],
  },
  {
    id: '56',
    title: 'Implement a Promise-based API Client',
    category: 'Web Development',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Create a simple JavaScript class `ApiClient` that uses `fetch` and Promises to make GET and POST requests. It should have `get(url)` and `post(url, data)` methods.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: 'class ApiClient {\n  async get(url) {\n    // Your code here\n  }\n\n  async post(url, data) {\n    // Your code here\n  }\n}',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: "const client = new ApiClient(); client.get('https://api.example.com/posts/1');", output: 'Returns a Promise that resolves with the post data.'}
    ],
    constraints: ['Methods must return Promises.', 'Handle potential network errors by rejecting the promise.', 'For POST requests, set the correct headers (`Content-Type: application/json`).'],
  },
  {
    id: '57',
    title: 'Sanitize User Input to Prevent DOM-based XSS',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Write a JavaScript function that takes a string of user input and sanitizes it to prevent DOM-based XSS. The function should remove any HTML tags from the string.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: 'function sanitizeInput(input) {\n  // Your code here to remove HTML tags\n}',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: "'Hello <b>world</b>'", output: "'Hello world'" },
      { input: "'<img src=x onerror=alert(1)>'", output: "''" },
    ],
    constraints: ['The simplest, most effective way is to use a regular expression to strip all tags.'],
  },
  {
    id: '58',
    title: 'Implement a Naive Bayes Classifier',
    category: 'AI/ML',
    difficulty: 'Advanced',
    xp: 275,
    description: 'Implement a simple Gaussian Naive Bayes classifier in Python from scratch. It should have a `fit` method to train on data and a `predict` method to classify new data points.',
    starterCode: {
      python: 'import numpy as np\n\nclass NaiveBayesClassifier:\n    def fit(self, X, y):\n        # Your code to calculate mean, var, and prior for each class\n        pass\n\n    def predict(self, X):\n        # Your code to predict the class for X\n        pass\n',
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Assume features are continuous and normally distributed (Gaussian).', 'The `fit` method should store the necessary statistics.', 'The `predict` method should use Bayes\' theorem to find the most likely class.'],
  },
  {
    id: '59',
    title: 'Jump Game',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'You are given an integer array nums. You are initially positioned at the array\'s first index, and each element in the array represents your maximum jump length at that position. Return true if you can reach the last index, or false otherwise.',
    starterCode: {
      python: 'def can_jump(nums):\n  # Your code here\n  pass',
      javascript: 'function canJump(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean canJump(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool canJump(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [2,3,1,1,4]', output: 'true', explanation: 'Jump 1 step from index 0 to 1, then 3 steps to the last index.' },
      { input: 'nums = [3,2,1,0,4]', output: 'false', explanation: 'You will always arrive at index 3. Its maximum jump length is 0, which makes it impossible to reach the last index.' },
    ],
    constraints: ['1 <= nums.length <= 10^4', '0 <= nums[i] <= 10^5'],
  },
  {
    id: '60',
    title: 'Unique Paths',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time. Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.',
    starterCode: {
      python: 'def unique_paths(m, n):\n  # Your code here\n  pass',
      javascript: 'function uniquePaths(m, n) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int uniquePaths(int m, int n) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'm = 3, n = 7', output: '28' },
      { input: 'm = 3, n = 2', output: '3', explanation: 'From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. Right -> Down -> Down 2. Down -> Down -> Right 3. Down -> Right -> Down' },
    ],
    constraints: ['1 <= m, n <= 100'],
  },
  {
    id: '61',
    title: 'Throttled API Caller',
    category: 'Web Development',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Implement a throttle function in JavaScript. The function should ensure that the wrapped function is called at most once per specified time interval, even if it\'s invoked multiple times.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: 'function throttle(func, limit) {\n  // Your code here\n}\n\n// Example usage:\n// const throttledScroll = throttle(() => console.log("Scrolled!"), 1000);\n// window.addEventListener("scroll", throttledScroll);',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: 'Calling a throttled function 10 times in 1 second with a 500ms limit', output: 'The wrapped function is only called twice.' }
    ],
    constraints: ['Must be implemented in plain JavaScript.', 'Should handle the case where the function is called after the throttle period has ended.'],
  },
  {
    id: '62',
    title: 'CSRF Token Implementation',
    category: 'Cybersecurity',
    difficulty: 'Advanced',
    xp: 225,
    description: 'Describe the Synchronizer Token Pattern for preventing Cross-Site Request Forgery (CSRF). Explain how a token is generated, where it is stored, and how the server validates it for a state-changing request (e.g., a form submission).',
    starterCode: {
      python: '# Describe the steps in comments.\n# 1. Token Generation:\n#\n# 2. Token Storage & Transmission:\n#\n# 3. Token Validation:\n#',
      javascript: '// Describe the steps in comments.\n// 1. Token Generation:\n//\n// 2. Token Storage & Transmission:\n//\n// 3. Token Validation:\n//',
      java: '// Describe the steps in comments.\n// 1. Token Generation:\n//\n// 2. Token Storage & Transmission:\n//\n// 3. Token Validation:\n//',
      cpp: '// Describe the steps in comments.\n// 1. Token Generation:\n//\n// 2. Token Storage & Transmission:\n//\n// 3. Token Validation:\n//',
    },
    examples: [],
    constraints: ['Your answer should describe the complete lifecycle of a CSRF token in this pattern.'],
  },
  {
    id: '63',
    title: 'Decision Tree Classifier from Scratch',
    category: 'AI/ML',
    difficulty: 'Expert',
    xp: 300,
    description: 'Implement a basic Decision Tree classifier in Python for a dataset with categorical features. Focus on implementing the functions to find the best split (using information gain or Gini impurity) and to build the tree recursively.',
    starterCode: {
      python: 'import numpy as np\n\nclass DecisionTree:\n    def __init__(self, max_depth=5):\n        # Your init code here\n        pass\n\n    def _gini_impurity(self, y):\n        # Calculate Gini impurity\n        pass\n\n    def _information_gain(self, y, x_feature, threshold):\n        # Calculate information gain\n        pass\n\n    def _best_split(self, X, y):\n        # Find the best feature and threshold to split on\n        pass\n\n    def fit(self, X, y):\n        # Build the tree recursively\n        pass\n\n    def predict(self, X):\n        # Predict labels for new data\n        pass\n',
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Implement either Gini impurity or information gain.', 'The tree should handle stopping conditions like max depth or pure nodes.'],
  },
  {
    id: '64',
    title: 'React Context API for Theme Switching',
    category: 'Web Development',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Implement a theme switcher (e.g., light/dark mode) for a React application using the Context API. Create a `ThemeContext`, a `ThemeProvider` component, and a `useTheme` custom hook.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: "import React, { createContext, useContext, useState } from 'react';\n\n// 1. Create the context\nconst ThemeContext = createContext();\n\n// 2. Create the provider component\nexport function ThemeProvider({ children }) {\n  // Your state logic here\n  return (\n    <ThemeContext.Provider value={/* value */}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\n// 3. Create the custom hook\nexport function useTheme() {\n  // Your hook logic here\n}",
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['The `ThemeProvider` should manage the current theme state.', 'The `useTheme` hook should provide the current theme and a function to toggle it.', 'Descendant components should be able to consume the context.'],
  },
  {
    id: '65',
    title: 'Decode Ways',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'A message containing letters from A-Z can be encoded into numbers using the following mapping: \'A\' -> 1, \'B\' -> 2, ..., \'Z\' -> 26. Given a string `s` containing only digits, return the number of ways to decode it.',
    starterCode: {
      python: 'def num_decodings(s):\n  # Your code here\n  pass',
      javascript: 'function numDecodings(s) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int numDecodings(String s) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int numDecodings(string s) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "12"', output: '2', explanation: '"12" could be decoded as "AB" (1 2) or "L" (12).' },
      { input: 's = "226"', output: '3', explanation: '"226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).' },
      { input: 's = "06"', output: '0', explanation: '"06" cannot be mapped to "F" because of the leading zero.' },
    ],
    constraints: ['1 <= s.length <= 100', 's contains only digits and may contain leading zero(s).'],
  },
  {
    id: '66',
    title: 'HTTP Headers for Security',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'For each of the following security-related HTTP headers, briefly explain its purpose: `Strict-Transport-Security`, `X-Content-Type-Options`, and `X-Frame-Options`.',
    starterCode: {
      python: '# Strict-Transport-Security:\n# \n\n# X-Content-Type-Options:\n# \n\n# X-Frame-Options:\n#',
      javascript: '// Strict-Transport-Security:\n// \n\n// X-Content-Type-Options:\n// \n\n// X-Frame-Options:\n//',
      java: '// Strict-Transport-Security:\n// \n\n// X-Content-Type-Options:\n// \n\n// X-Frame-Options:\n//',
      cpp: '// Strict-Transport-Security:\n// \n\n// X-Content-Type-Options:\n// \n\n// X-Frame-Options:\n//',
    },
    examples: [],
    constraints: ['Provide a one or two-sentence explanation for each header in the comments.'],
  },
  {
    id: '67',
    title: 'Simple Linear Regression',
    category: 'AI/ML',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Implement a simple linear regression model from scratch in Python. Your class should have `fit(X, y)` and `predict(X)` methods. Use the formula-based approach to find the coefficients (slope and intercept).',
    starterCode: {
      python: 'import numpy as np\n\nclass SimpleLinearRegression:\n    def __init__(self):\n        self.slope = None\n        self.intercept = None\n\n    def fit(self, X, y):\n        # Calculate slope (b1) and intercept (b0)\n        # b1 = sum((xi - mean(x)) * (yi - mean(y))) / sum((xi - mean(x))^2)\n        # b0 = mean(y) - b1 * mean(x)\n        pass\n\n    def predict(self, X):\n        # Predict y values using y = b0 + b1*X\n        pass\n',
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['X and y will be numpy arrays.', 'The `fit` method must calculate and store the slope and intercept.'],
  },
  {
    id: '68',
    title: 'Find First and Last Position of Element in Sorted Array',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value. If `target` is not found in the array, return `[-1, -1]`. You must write an algorithm with O(log n) runtime complexity.',
    starterCode: {
      python: 'def search_range(nums, target):\n  # Your code here\n  pass',
      javascript: 'function searchRange(nums, target) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int[] searchRange(int[] nums, int target) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<int> searchRange(vector<int>& nums, int target) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [5,7,7,8,8,10], target = 8', output: '[3,4]' },
      { input: 'nums = [5,7,7,8,8,10], target = 6', output: '[-1,-1]' },
      { input: 'nums = [], target = 0', output: '[-1,-1]' },
    ],
    constraints: ['0 <= nums.length <= 10^5', '-10^9 <= nums[i] <= 10^9', 'nums is a non-decreasing array.', '-10^9 <= target <= 10^9'],
  },
  {
    id: '69',
    title: 'Combination Sum',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given an array of distinct integers `candidates` and a `target` integer, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may return the combinations in any order. The same number may be chosen from `candidates` an unlimited number of times.',
    starterCode: {
      python: 'def combination_sum(candidates, target):\n  # Your code here\n  pass',
      javascript: 'function combinationSum(candidates, target) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<List<Integer>> combinationSum(int[] candidates, int target) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'candidates = [2,3,6,7], target = 7', output: '[[2,2,3],[7]]' },
      { input: 'candidates = [2,3,5], target = 8', output: '[[2,2,2,2],[2,3,3],[3,5]]' },
    ],
    constraints: ['1 <= candidates.length <= 30', '2 <= candidates[i] <= 40', 'All elements of `candidates` are distinct.', '1 <= target <= 40'],
  },
  {
    id: '70',
    title: 'Virtual DOM Diffing Explained',
    category: 'Web Development',
    difficulty: 'Advanced',
    xp: 200,
    description: 'In your own words, explain the concept of Virtual DOM in the context of a library like React. Describe the three main steps of the diffing and reconciliation process.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: '// 1. The Trigger:\n// What causes a re-render?\n\n// 2. The Diffing:\n// What is compared?\n\n// 3. The Reconciliation:\n// What happens to the actual DOM?',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Your explanation should be clear and concise.', 'Use the comments in the starter code to structure your answer.'],
  },
  {
    id: '71',
    title: 'What are JWTs?',
    category: 'Cybersecurity',
    difficulty: 'Beginner',
    xp: 100,
    description: 'What is a JSON Web Token (JWT)? Describe the three parts of a JWT and what each part contains.',
    starterCode: {
      python: '// 1. Header:\n// \n\n// 2. Payload:\n// \n\n// 3. Signature:\n//',
      javascript: '// 1. Header:\n// \n\n// 2. Payload:\n// \n\n// 3. Signature:\n//',
      java: '// 1. Header:\n// \n\n// 2. Payload:\n// \n\n// 3. Signature:\n//',
      cpp: '// 1. Header:\n// \n\n// 2. Payload:\n// \n\n// 3. Signature:\n//',
    },
    examples: [],
    constraints: ['Provide a brief explanation for each of the three parts of a JWT.'],
  },
  {
    id: '72',
    title: 'One-Hot Encoding',
    category: 'AI/ML',
    difficulty: 'Beginner',
    xp: 125,
    description: 'Implement a function in Python that performs one-hot encoding on a list of categorical labels. The function should take a list of strings and return a dictionary mapping each unique label to its one-hot encoded vector.',
    starterCode: {
      python: 'def one_hot_encode(labels):\n  """\n  Performs one-hot encoding on a list of labels.\n  Example: [\'red\', \'blue\', \'red\'] -> {\'red\': [1, 0], \'blue\': [0, 1]}\n  """\n  # Your code here\n  pass',
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: '["cat", "dog", "cat", "mouse"]', output: '{"cat": [1,0,0], "dog": [0,1,0], "mouse": [0,0,1]} (order of vectors may vary)' }
    ],
    constraints: ['The function should first find all unique labels.', 'The length of each vector should equal the number of unique labels.'],
  },
  {
    id: '73',
    title: 'Permutations',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order.',
    starterCode: {
      python: 'def permute(nums):\n  # Your code here\n  pass',
      javascript: 'function permute(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<List<Integer>> permute(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<int>> permute(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,3]', output: '[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]' },
      { input: 'nums = [0,1]', output: '[[0,1],[1,0]]' },
    ],
    constraints: ['1 <= nums.length <= 6', '-10 <= nums[i] <= 10', 'All the integers of nums are unique.'],
  },
  {
    id: '74',
    title: 'Event Bubbling and Capturing',
    category: 'Web Development',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Explain the difference between event bubbling and event capturing in the browser\'s DOM. In which order do they occur? How can you listen for an event in the capturing phase using `addEventListener`?',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: '// Event Bubbling:\n// \n\n// Event Capturing:\n// \n\n// Order of Phases:\n// \n\n// Listening in Capturing Phase:\n//',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Use comments to structure your answer clearly.'],
  },
  {
    id: '75',
    title: 'Same-Origin Policy (SOP)',
    category: 'Cybersecurity',
    difficulty: 'Beginner',
    xp: 125,
    description: 'What is the Same-Origin Policy (SOP)? What three components define an "origin"? How does SOP relate to CORS (Cross-Origin Resource Sharing)?',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: '// SOP Definition:\n// \n\n// Components of an Origin:\n// 1. \n// 2. \n// 3. \n\n// Relation to CORS:\n//',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Provide concise answers for each section in the comments.'],
  },
  {
    id: '76',
    title: 'Activation Functions',
    category: 'AI/ML',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Briefly describe the purpose of an activation function in a neural network. Name and write the formula for two common activation functions (e.g., Sigmoid, ReLU, Tanh).',
    starterCode: {
      python: '# Purpose of Activation Functions:\n# \n\n# Function 1: [Name]\n# Formula: \n\n# Function 2: [Name]\n# Formula:',
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Your answer should be in the comments of the Python starter code.'],
  },
  {
    id: '77',
    title: 'Sliding Window Maximum',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 275,
    description: 'You are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.',
    starterCode: {
      python: 'def max_sliding_window(nums, k):\n  # Your code here\n  pass',
      javascript: 'function maxSlidingWindow(nums, k) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int[] maxSlidingWindow(int[] nums, int k) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<int> maxSlidingWindow(vector<int>& nums, int k) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,3,-1,-3,5,3,6,7], k = 3', output: '[3,3,5,5,6,7]' },
      { input: 'nums = [1], k = 1', output: '[1]' },
    ],
    constraints: ['1 <= nums.length <= 10^5', '-10^4 <= nums[i] <= 10^4', '1 <= k <= nums.length'],
  },
  {
    id: '78',
    title: 'Explain CSS Box Sizing',
    category: 'Web Development',
    difficulty: 'Beginner',
    xp: 50,
    description: "Explain the difference between the two main values for the CSS `box-sizing` property: `content-box` and `border-box`. Which one is generally considered easier to work with and why?",
    starterCode: {
      python: '// N/A',
      javascript: '// content-box:\n// \n\n// border-box:\n// \n\n// Preferred & Why:\n//',
      java: '// N/A',
      cpp: '// N/A',
    },
    examples: [],
    constraints: ['Explain how width and height are calculated for each model.', 'State which model is more intuitive for layout design.'],
  },
  {
    id: '79',
    title: 'Explain CSS Specificity',
    category: 'Web Development',
    difficulty: 'Intermediate',
    xp: 100,
    description: 'What is CSS Specificity? Describe the hierarchy of selectors (e.g., inline styles, IDs, classes, elements) and how a browser decides which style rule to apply when there are conflicts.',
    starterCode: {
      python: '// N/A',
      javascript: '// Specificity Definition:\n// \n\n// Hierarchy (from most to least specific):\n// 1. \n// 2. \n// 3. \n// 4. \n\n// The `!important` rule:\n// ',
      java: '// N/A',
      cpp: '// N/A',
    },
    examples: [],
    constraints: ['List at least four levels of selector specificity.', "Mention the effect of the `!important` rule."],
  },
  {
    id: '80',
    title: 'localStorage vs sessionStorage',
    category: 'Web Development',
    difficulty: 'Beginner',
    xp: 75,
    description: 'What are the key differences between `localStorage` and `sessionStorage` in JavaScript? Describe their scope, lifespan, and a use case for each.',
    starterCode: {
      python: '// N/A',
      javascript: '// localStorage:\n// Scope: \n// Lifespan: \n// Use Case: \n\n// sessionStorage:\n// Scope: \n// Lifespan: \n// Use Case: ',
      java: '// N/A',
      cpp: '// N/A',
    },
    examples: [],
    constraints: ['Your answer should clearly distinguish the two storage mechanisms.'],
  },
  {
    id: '81',
    title: 'Simple React Accordion',
    category: 'Web Development',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Create a simple, reusable Accordion component in React. The component should accept an array of items, each with a title and content. Clicking a title should expand its content, and clicking it again should collapse it.',
    starterCode: {
      python: '// N/A',
      javascript: 'import React, { useState } from "react";\n\nfunction Accordion({ items }) {\n  // Your state and logic here\n\n  return (\n    <div>\n      {/* Map over items and render them */}\n    </div>\n  );\n}',
      java: '// N/A',
      cpp: '// N/A',
    },
    examples: [],
    constraints: ['Only one accordion item should be open at a time.', 'Use React hooks (`useState`) to manage the state.'],
  },
  {
    id: '82',
    title: 'JavaScript Equality (== vs ===)',
    category: 'Web Development',
    difficulty: 'Beginner',
    xp: 50,
    description: "Explain the difference between `==` (loose equality) and `===` (strict equality) in JavaScript. Provide an example where they produce different results.",
    starterCode: {
      python: '// N/A',
      javascript: '// Loose Equality (==):\n// \n\n// Strict Equality (===):\n// \n\n// Example of difference:\n//',
      java: '// N/A',
      cpp: '// N/A',
    },
    examples: [
      { input: '5 == "5"', output: 'true' },
      { input: '5 === "5"', output: 'false' },
    ],
    constraints: ['Mention "type coercion" in your explanation of loose equality.'],
  },
  {
    id: '83',
    title: 'Explain HTTPS',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 125,
    description: 'What does HTTPS stand for? Explain at a high level how it works, including the roles of SSL/TLS, encryption, and digital certificates. Why is it important?',
    starterCode: {
      python: '# HTTPS stands for:\n# \n\n# How it works (high level):\n# \n\n# Importance:\n#',
      javascript: '// N/A',
      java: '// N/A',
      cpp: '// N/A',
    },
    examples: [],
    constraints: ['Your answer should cover the concepts of confidentiality, integrity, and authentication.'],
  },
  {
    id: '84',
    title: 'What is a DDoS Attack?',
    category: 'Cybersecurity',
    difficulty: 'Beginner',
    xp: 75,
    description: 'What is a Distributed Denial-of-Service (DDoS) attack? Explain the primary goal of such an attack and how it differs from a regular Denial-of-Service (DoS) attack.',
    starterCode: {
      python: '# DDoS Definition:\n# \n\n# Primary Goal:\n# \n\n# Difference from DoS:\n#',
      javascript: '// N/A',
      java: '// N/A',
      cpp: '// N/A',
    },
    examples: [],
    constraints: ['Mention the use of a "botnet" in your explanation.'],
  },
  {
    id: '85',
    title: 'Hashing vs. Encryption',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 100,
    description: 'What is the fundamental difference between hashing and encryption? Explain which one is a one-way process and which is two-way. Provide a common use case for each.',
    starterCode: {
      python: '# Hashing:\n# Process: \n# Use Case: \n\n# Encryption:\n# Process: \n# Use Case: ',
      javascript: '// N/A',
      java: '// N/A',
      cpp: '// N/A',
    },
    examples: [],
    constraints: ['Your explanation should highlight the reversibility (or lack thereof) of each process.'],
  },
  {
    id: '86',
    title: 'Preventing Broken Access Control',
    category: 'Cybersecurity',
    difficulty: 'Advanced',
    xp: 200,
    description: 'Broken Access Control is a critical web security risk. Describe three concrete measures a developer can take in a web application to prevent it. For example, how would you ensure a user can only view their own orders and not someone else\'s?',
    starterCode: {
      python: '# Measure 1:\n# \n\n# Measure 2:\n# \n\n# Measure 3:\n#',
      javascript: '// N/A',
      java: '// N/A',
      cpp: '// N/A',
    },
    examples: [],
    constraints: ['Focus on server-side validation rather than client-side hiding of elements.', 'Think about verifying ownership of resources.'],
  },
  {
    id: '87',
    title: 'OWASP Top 10 Explained',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'What is the OWASP Top 10? You do not need to list all ten items. Instead, pick two risks from a recent list (e.g., Injection, Broken Authentication, Sensitive Data Exposure) and briefly explain what they are.',
    starterCode: {
      python: '# What is the OWASP Top 10?\n# \n\n# Risk 1: [Name]\n# Explanation:\n# \n\n# Risk 2: [Name]\n# Explanation:\n#',
      javascript: '// N/A',
      java: '// N/A',
      cpp: '// N/A',
    },
    examples: [],
    constraints: ['Your answer should demonstrate a basic understanding of the purpose of the OWASP list.'],
  },
  {
    id: '88',
    title: 'Overfitting vs. Underfitting',
    category: 'AI/ML',
    difficulty: 'Beginner',
    xp: 100,
    description: 'In the context of machine learning, explain the concepts of overfitting and underfitting. How would you typically identify each in terms of model performance on training vs. validation data?',
    starterCode: {
      python: '# Overfitting:\n# Description: \n# Identification: \n\n# Underfitting:\n# Description: \n# Identification: ',
      javascript: '// N/A',
      java: '// N/A',
      cpp: '// N/A',
    },
    examples: [],
    constraints: ['Relate performance (e.g., high accuracy, low error) on training and validation sets to each concept.'],
  },
  {
    id: '89',
    title: 'L1 vs. L2 Regularization',
    category: 'AI/ML',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'What is the purpose of regularization in machine learning? Explain the difference between L1 (Lasso) and L2 (Ridge) regularization, particularly in terms of how they affect model coefficients.',
    starterCode: {
      python: '# Purpose of Regularization:\n# \n\n# L1 Regularization (Lasso):\n# Effect on coefficients: \n\n# L2 Regularization (Ridge):\n# Effect on coefficients: ',
      javascript: '// N/A',
      java: '// N/A',
      cpp: '// N/A',
    },
    examples: [],
    constraints: ['Mention which technique can be used for feature selection.'],
  },
  {
    id: '90',
    title: 'Calculate Mean Squared Error',
    category: 'AI/ML',
    difficulty: 'Beginner',
    xp: 125,
    description: 'Implement a Python function that calculates the Mean Squared Error (MSE) between two lists or numpy arrays of numbers (predicted values and true values).',
    starterCode: {
      python: 'import numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n  """Calculates the Mean Squared Error."""\n  # Your code here\n  pass',
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: 'y_true = [1, 2, 3], y_pred = [1, 2, 3]', output: '0.0' },
      { input: 'y_true = [1, 2, 3], y_pred = [2, 3, 4]', output: '1.0' }
    ],
    constraints: ['The function should work with both Python lists and NumPy arrays.', 'MSE = (1/n) * sum((y_true_i - y_pred_i)^2)'],
  },
  {
    id: '91',
    title: 'Bias-Variance Tradeoff',
    category: 'AI/ML',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Explain the Bias-Variance Tradeoff in machine learning. What does high bias imply? What does high variance imply? How does model complexity relate to this tradeoff?',
    starterCode: {
      python: '# High Bias:\n# \n\n# High Variance:\n# \n\n# Relation to Model Complexity:\n#',
      javascript: '// N/A',
      java: '// N/A',
      cpp: '// N/A',
    },
    examples: [],
    constraints: ['Relate high bias to underfitting and high variance to overfitting.'],
  },
  {
    id: '92',
    title: 'What is a Confusion Matrix?',
    category: 'AI/ML',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Describe what a confusion matrix is and what it is used for in a classification problem. Define the four components of a 2x2 confusion matrix: True Positives (TP), True Negatives (TN), False Positives (FP), and False Negatives (FN).',
    starterCode: {
      python: '# Purpose of Confusion Matrix:\n# \n\n# True Positives (TP):\n# \n\n# True Negatives (TN):\n# \n\n# False Positives (FP):\n# \n\n# False Negatives (FN):\n#',
      javascript: '// N/A',
      java: '// N/A',
      cpp: '// N/A',
    },
    examples: [],
    constraints: ['Your answer should be structured using the comments provided.'],
  },
  {
    id: '93',
    title: 'Server-Side vs. Client-Side Rendering',
    category: 'Web Development',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Compare and contrast Server-Side Rendering (SSR) and Client-Side Rendering (CSR). Mention at least one pro and one con for each approach, considering factors like performance, SEO, and user experience.',
    starterCode: {
        python: '// N/A',
        javascript: '// Server-Side Rendering (SSR):\n// Pro: \n// Con: \n\n// Client-Side Rendering (CSR):\n// Pro: \n// Con: ',
        java: '// N/A',
        cpp: '// N/A',
    },
    examples: [],
    constraints: ['Consider initial page load time and interactivity.'],
  },
  {
    id: '94',
    title: 'What is a REST API?',
    category: 'Web Development',
    difficulty: 'Beginner',
    xp: 100,
    description: 'What is a RESTful API? Describe some of the key principles or constraints of REST architecture, such as statelessness and client-server separation.',
    starterCode: {
        python: '// N/A',
        javascript: '// REST Definition:\n// \n\n// Key Principle 1: [Name]\n// Description:\n\n// Key Principle 2: [Name]\n// Description:',
        java: '// N/A',
        cpp: '// N/A',
    },
    examples: [],
    constraints: ['Explain at least two core principles of REST.'],
  },
  {
    id: '95',
    title: 'Explain Cross-Origin Resource Sharing (CORS)',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'What is Cross-Origin Resource Sharing (CORS) and why is it necessary? Explain the role of the `Access-Control-Allow-Origin` response header.',
    starterCode: {
        python: '// N/A',
        javascript: '// What is CORS?\n// \n\n// Why is it necessary? (Hint: Same-Origin Policy)\n// \n\n// Role of Access-Control-Allow-Origin header:\n//',
        java: '// N/A',
        cpp: '// N/A',
    },
    examples: [],
    constraints: ['Connect your explanation back to the Same-Origin Policy.'],
  },
  {
    id: '96',
    title: 'Feature Scaling: Normalization vs. Standardization',
    category: 'AI/ML',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Why is feature scaling important for many machine learning algorithms? Explain the difference between Normalization (Min-Max Scaling) and Standardization (Z-score Normalization).',
    starterCode: {
        python: '# Importance of Feature Scaling:\n# \n\n# Normalization (Min-Max Scaling):\n# Formula/Range: \n\n# Standardization (Z-score Normalization):\n# Formula/Properties: ',
        javascript: '// N/A',
        java: '// N/A',
        cpp: '// N/A',
    },
    examples: [],
    constraints: ['Describe the resulting range or distribution for each technique.'],
  },
  {
    id: '97',
    title: 'Principle of Least Privilege',
    category: 'Cybersecurity',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Explain the security Principle of Least Privilege. Provide a practical example of how you would apply this principle when setting up a database user account for a web application.',
    starterCode: {
        python: '# Principle Definition:\n# \n\n# Practical Example (Database User):\n#',
        javascript: '// N/A',
        java: '// N/A',
        cpp: '// N/A',
    },
    examples: [],
    constraints: ['Your example should describe specific permissions (e.g., SELECT, INSERT) to grant or deny.'],
  },
  {
    id: '98',
    title: 'Majority Element',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given an array `nums` of size `n`, return the majority element. The majority element is the element that appears more than `⌊n / 2⌋` times. You may assume that the majority element always exists in the array.',
    starterCode: {
      python: 'def majority_element(nums):\n  # Your code here\n  pass',
      javascript: 'function majorityElement(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int majorityElement(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [3,2,3]', output: '3' },
      { input: 'nums = [2,2,1,1,1,2,2]', output: '2' },
    ],
    constraints: ['n == nums.length', '1 <= n <= 5 * 10^4', '-10^9 <= nums[i] <= 10^9'],
  },
  {
    id: '99',
    title: 'Missing Number',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return the only number in the range that is missing from the array.',
    starterCode: {
      python: 'def missing_number(nums):\n  # Your code here\n  pass',
      javascript: 'function missingNumber(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int missingNumber(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [3,0,1]', output: '2' },
      { input: 'nums = [0,1]', output: '2' },
      { input: 'nums = [9,6,4,2,3,5,7,0,1]', output: '8' },
    ],
    constraints: ['n == nums.length', '1 <= n <= 10^4', '0 <= nums[i] <= n', 'All the numbers of `nums` are unique.'],
  },
  {
    id: '100',
    title: 'Move Zeroes',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 50,
    description: 'Given an integer array `nums`, move all `0`\'s to the end of it while maintaining the relative order of the non-zero elements. Note that you must do this in-place without making a copy of the array.',
    starterCode: {
      python: 'def move_zeroes(nums):\n  # Your code here\n  pass',
      javascript: 'function moveZeroes(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public void moveZeroes(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [0,1,0,3,12]', output: '[1,3,12,0,0]' },
      { input: 'nums = [0]', output: '[0]' },
    ],
    constraints: ['1 <= nums.length <= 10^4', '-2^31 <= nums[i] <= 2^31 - 1'],
  },
  {
    id: '101',
    title: 'Backspace String Compare',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given two strings `s` and `t`, return `true` if they are equal when both are typed into empty text editors. `#` means a backspace character.',
    starterCode: {
      python: 'def backspace_compare(s, t):\n  # Your code here\n  pass',
      javascript: 'function backspaceCompare(s, t) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean backspaceCompare(String s, String t) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool backspaceCompare(string s, string t) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "ab#c", t = "ad#c"', output: 'true' },
      { input: 's = "ab##", t = "c#d#"', output: 'true' },
      { input: 's = "a##c", t = "#a#c"', output: 'true' },
      { input: 's = "a#c", t = "b"', output: 'false' },
    ],
    constraints: ['1 <= s.length, t.length <= 200', 's and t only contain lowercase letters and \'#\' characters.'],
  },
  {
    id: '102',
    title: 'Contains Duplicate',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 50,
    description: 'Given an integer array `nums`, return `true` if any value appears at least twice in the array, and return `false` if every element is distinct.',
    starterCode: {
      python: 'def contains_duplicate(nums):\n  # Your code here\n  pass',
      javascript: 'function containsDuplicate(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean containsDuplicate(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,3,1]', output: 'true' },
      { input: 'nums = [1,2,3,4]', output: 'false' },
    ],
    constraints: ['1 <= nums.length <= 10^5', '-10^9 <= nums[i] <= 10^9'],
  },
  {
    id: '103',
    title: 'Single Number',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given a non-empty array of integers `nums`, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.',
    starterCode: {
      python: 'def single_number(nums):\n  # Your code here\n  pass',
      javascript: 'function singleNumber(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int singleNumber(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [2,2,1]', output: '1' },
      { input: 'nums = [4,1,2,1,2]', output: '4' },
    ],
    constraints: ['1 <= nums.length <= 3 * 10^4', '-3 * 10^4 <= nums[i] <= 3 * 10^4', 'Each element in the array appears twice except for one element which appears only once.'],
  },
  {
    id: '104',
    title: 'Fibonacci Number',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 50,
    description: 'The Fibonacci numbers, commonly denoted F(n), form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1.',
    starterCode: {
      python: 'def fib(n):\n  # Your code here\n  pass',
      javascript: 'function fib(n) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int fib(int n) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int fib(int n) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'n = 2', output: '1', explanation: 'F(2) = F(1) + F(0) = 1 + 0 = 1.' },
      { input: 'n = 3', output: '2', explanation: 'F(3) = F(2) + F(1) = 1 + 1 = 2.' },
      { input: 'n = 4', output: '3', explanation: 'F(4) = F(3) + F(2) = 2 + 1 = 3.' },
    ],
    constraints: ['0 <= n <= 30'],
  },
  {
    id: '105',
    title: 'Sort Colors',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an array `nums` with `n` objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.',
    starterCode: {
      python: 'def sort_colors(nums):\n  # Your code here\n  pass',
      javascript: 'function sortColors(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public void sortColors(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [2,0,2,1,1,0]', output: '[0,0,1,1,2,2]' },
      { input: 'nums = [2,0,1]', output: '[0,1,2]' },
    ],
    constraints: ['n == nums.length', '1 <= n <= 300', 'nums[i] is 0, 1, or 2.'],
  },
  {
    id: '106',
    title: 'Word Search',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given an `m x n` grid of characters `board` and a string `word`, return `true` if `word` exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where "adjacent" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.',
    starterCode: {
      python: 'def exist(board, word):\n  # Your code here\n  pass',
      javascript: 'function exist(board, word) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean exist(char[][] board, String word) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool exist(vector<vector<char>>& board, string word) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"', output: 'true' },
      { input: 'board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"', output: 'true' },
      { input: 'board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"', output: 'false' },
    ],
    constraints: ['m == board.length', 'n = board[i].length', '1 <= m, n <= 6', '1 <= word.length <= 15', 'board and word consists of only lowercase and uppercase English letters.'],
  },
  {
    id: '107',
    title: 'Top K Frequent Elements',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an integer array `nums` and an integer `k`, return the `k` most frequent elements. You may return the answer in any order.',
    starterCode: {
      python: 'def top_k_frequent(nums, k):\n  # Your code here\n  pass',
      javascript: 'function topKFrequent(nums, k) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int[] topKFrequent(int[] nums, int k) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,1,1,2,2,3], k = 2', output: '[1,2]' },
      { input: 'nums = [1], k = 1', output: '[1]' },
    ],
    constraints: ['1 <= nums.length <= 10^5', 'k is in the range [1, the number of unique elements in the array].', 'It is guaranteed that the answer is unique.'],
  },
  {
    id: '108',
    title: 'Happy Number',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Write an algorithm to determine if a number `n` is happy. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy.',
    starterCode: {
      python: 'def is_happy(n):\n  # Your code here\n  pass',
      javascript: 'function isHappy(n) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean isHappy(int n) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool isHappy(int n) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'n = 19', output: 'true' },
      { input: 'n = 2', output: 'false' },
    ],
    constraints: ['1 <= n <= 2^31 - 1'],
  },
  {
    id: '109',
    title: 'Reverse Linked List',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given the `head` of a singly linked list, reverse the list, and return the reversed list.',
    starterCode: {
      python: '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\ndef reverse_list(head):\n  # Your code here\n  pass',
      javascript: 'function reverseList(head) {\n  // Your code here\n}',
      java: 'class Solution {\n  public ListNode reverseList(ListNode head) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'head = [1,2,3,4,5]', output: '[5,4,3,2,1]' },
      { input: 'head = [1,2]', output: '[2,1]' },
      { input: 'head = []', output: '[]' },
    ],
    constraints: ['The number of nodes in the list is the range [0, 5000].', '-5000 <= Node.val <= 5000'],
  },
  {
    id: '110',
    title: 'Add Two Numbers',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.',
    starterCode: {
      python: '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\ndef add_two_numbers(l1, l2):\n  # Your code here\n  pass',
      javascript: 'function addTwoNumbers(l1, l2) {\n  // Your code here\n}',
      java: 'class Solution {\n  public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'l1 = [2,4,3], l2 = [5,6,4]', output: '[7,0,8]' },
      { input: 'l1 = [0], l2 = [0]', output: '[0]' },
      { input: 'l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]', output: '[8,9,9,9,0,0,0,1]' },
    ],
    constraints: ['The number of nodes in each linked list is in the range [1, 100].', '0 <= Node.val <= 9', 'It is guaranteed that the list represents a number that does not have leading zeros.'],
  },
  {
    id: '111',
    title: 'Palindrome Linked List',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Given the `head` of a singly linked list, return `true` if it is a palindrome.',
    starterCode: {
      python: 'def is_palindrome_list(head):\n  # Your code here\n  pass',
      javascript: 'function isPalindrome(head) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean isPalindrome(ListNode head) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'head = [1,2,2,1]', output: 'true' },
      { input: 'head = [1,2]', output: 'false' },
    ],
    constraints: ['The number of nodes in the list is in the range [1, 10^5].', '0 <= Node.val <= 9'],
  },
  {
    id: '112',
    title: 'Diameter of Binary Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Given the `root` of a binary tree, return the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.',
    starterCode: {
      python: 'def diameter_of_binary_tree(root):\n  # Your code here\n  pass',
      javascript: 'function diameterOfBinaryTree(root) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int diameterOfBinaryTree(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [1,2,3,4,5]', output: '3' },
      { input: 'root = [1,2]', output: '1' },
    ],
    constraints: ['The number of nodes in the tree is in the range [1, 10^4].', '-100 <= Node.val <= 100'],
  },
  {
    id: '113',
    title: 'Path Sum',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Given the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a root-to-leaf path such that adding up all the values along the path equals `targetSum`.',
    starterCode: {
      python: 'def has_path_sum(root, targetSum):\n  # Your code here\n  pass',
      javascript: 'function hasPathSum(root, targetSum) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean hasPathSum(TreeNode root, int targetSum) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool hasPathSum(TreeNode* root, int targetSum) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22', output: 'true' },
      { input: 'root = [1,2,3], targetSum = 5', output: 'false' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 5000].', '-1000 <= Node.val <= 1000', '-1000 <= targetSum <= 1000'],
  },
  {
    id: '114',
    title: 'Flatten Binary Tree to Linked List',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given the `root` of a binary tree, flatten the tree into a "linked list" in-place. The "linked list" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`.',
    starterCode: {
      python: 'def flatten(root):\n  # Your code here\n  pass',
      javascript: 'function flatten(root) {\n  // Your code here\n}',
      java: 'class Solution {\n  public void flatten(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    void flatten(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [1,2,5,3,4,null,6]', output: '[1,null,2,null,3,null,4,null,5,null,6]' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 2000].', '-100 <= Node.val <= 100'],
  },
  {
    id: '115',
    title: 'Gas Station',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'There are `n` gas stations along a circular route, where the amount of gas at the `i`th station is `gas[i]`. You have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `i`th station to its next `(i + 1)`th station. You begin the journey with an empty tank at one of the gas stations. Given two integer arrays `gas` and `cost`, return the starting gas station\'s index if you can travel around the circuit once in the clockwise direction, otherwise return -1.',
    starterCode: {
      python: 'def can_complete_circuit(gas, cost):\n  # Your code here\n  pass',
      javascript: 'function canCompleteCircuit(gas, cost) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int canCompleteCircuit(int[] gas, int[] cost) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'gas = [1,2,3,4,5], cost = [3,4,5,1,2]', output: '3' },
      { input: 'gas = [2,3,4], cost = [3,4,3]', output: '-1' },
    ],
    constraints: ['gas.length == n', 'cost.length == n', '1 <= n <= 10^5', '0 <= gas[i], cost[i] <= 10^4'],
  },
  {
    id: '116',
    title: 'Populating Next Right Pointers in Each Node',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. Populate each `next` pointer to point to its next right node. If there is no next right node, the `next` pointer should be set to `NULL`.',
    starterCode: {
      python: '# Definition for a Node.\n# class Node:\n#     def __init__(self, val, left=None, right=None, next=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n#         self.next = next\n\ndef connect(root):\n  # Your code here\n  pass',
      javascript: 'function connect(root) {\n  // Your code here\n}',
      java: 'class Solution {\n  public Node connect(Node root) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    Node* connect(Node* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [1,2,3,4,5,6,7]', output: '[1,#,2,3,#,4,5,6,7,#]' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 2^12 - 1].', '-1000 <= Node.val <= 1000', 'The tree is a perfect binary tree.'],
  },
  {
    id: '117',
    title: 'Count Primes',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an integer `n`, return the number of prime numbers that are strictly less than `n`.',
    starterCode: {
      python: 'def count_primes(n):\n  # Your code here\n  pass',
      javascript: 'function countPrimes(n) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int countPrimes(int n) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int countPrimes(int n) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'n = 10', output: '4' },
      { input: 'n = 0', output: '0' },
      { input: 'n = 1', output: '0' },
    ],
    constraints: ['0 <= n <= 5 * 10^6'],
  },
  {
    id: '118',
    title: 'Valid Anagram',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given two strings `s` and `t`, return `true` if `t` is an anagram of `s`, and `false` otherwise.',
    starterCode: {
      python: 'def is_anagram(s, t):\n  # Your code here\n  pass',
      javascript: 'function isAnagram(s, t) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean isAnagram(String s, String t) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "anagram", t = "nagaram"', output: 'true' },
      { input: 's = "rat", t = "car"', output: 'false' },
    ],
    constraints: ['1 <= s.length, t.length <= 5 * 10^4', 's and t consist of lowercase English letters.'],
  },
  {
    id: '119',
    title: 'Binary Tree Level Order Traversal',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given the `root` of a binary tree, return the level order traversal of its nodes\' values. (i.e., from left to right, level by level).',
    starterCode: {
      python: 'def level_order(root):\n  # Your code here\n  pass',
      javascript: 'function levelOrder(root) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<List<Integer>> levelOrder(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [3,9,20,null,null,15,7]', output: '[[3],[9,20],[15,7]]' },
      { input: 'root = [1]', output: '[[1]]' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 2000].', '-1000 <= Node.val <= 1000'],
  },
  {
    id: '120',
    title: 'Triangle',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given a triangle array, return the minimum path sum from top to bottom. For each step, you may move to an adjacent number of the row below.',
    starterCode: {
      python: 'def minimum_total(triangle):\n  # Your code here\n  pass',
      javascript: 'function minimumTotal(triangle) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int minimumTotal(List<List<Integer>> triangle) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int minimumTotal(vector<vector<int>>& triangle) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]', output: '11' },
      { input: 'triangle = [[-10]]', output: '-10' },
    ],
    constraints: ['1 <= triangle.length <= 200', 'triangle[0].length == 1', 'triangle[i].length == triangle[i - 1].length + 1', '-10^4 <= triangle[i][j] <= 10^4'],
  },
  {
    id: '121',
    title: 'Maximum Product Subarray',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given an integer array `nums`, find a subarray that has the largest product, and return the product.',
    starterCode: {
      python: 'def max_product(nums):\n  # Your code here\n  pass',
      javascript: 'function maxProduct(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int maxProduct(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [2,3,-2,4]', output: '6' },
      { input: 'nums = [-2,0,-1]', output: '0' },
    ],
    constraints: ['1 <= nums.length <= 2 * 10^4', '-10 <= nums[i] <= 10', 'The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.'],
  },
  {
    id: '122',
    title: 'Find Minimum in Rotated Sorted Array',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Suppose an array of length `n` sorted in ascending order is rotated between `1` and `n` times. Given the sorted rotated array `nums` of unique elements, return the minimum element of this array. You must write an algorithm that runs in O(log n) time.',
    starterCode: {
      python: 'def find_min(nums):\n  # Your code here\n  pass',
      javascript: 'function findMin(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int findMin(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int findMin(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [3,4,5,1,2]', output: '1' },
      { input: 'nums = [4,5,6,7,0,1,2]', output: '0' },
      { input: 'nums = [11,13,15,17]', output: '11' },
    ],
    constraints: ['n == nums.length', '1 <= n <= 5000', '-5000 <= nums[i] <= 5000', 'All the integers of `nums` are unique.', '`nums` is sorted and rotated between `1` and `n` times.'],
  },
  {
    id: '123',
    title: 'House Robber',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night. Given an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.',
    starterCode: {
      python: 'def rob(nums):\n  # Your code here\n  pass',
      javascript: 'function rob(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int rob(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int rob(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,3,1]', output: '4' },
      { input: 'nums = [2,7,9,3,1]', output: '12' },
    ],
    constraints: ['1 <= nums.length <= 100', '0 <= nums[i] <= 400'],
  },
  {
    id: '124',
    title: 'Word Search II',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'Given an `m x n` `board` of characters and a list of strings `words`, return all words on the board. Each word must be constructed from letters of sequentially adjacent cells, where "adjacent" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.',
    starterCode: {
      python: 'def find_words(board, words):\n  # Your code here\n  pass',
      javascript: 'function findWords(board, words) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<String> findWords(char[][] board, String[] words) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]', output: '["eat","oath"]' },
      { input: 'board = [["a","b"],["c","d"]], words = ["abcb"]', output: '[]' },
    ],
    constraints: ['m == board.length', 'n == board[i].length', '1 <= m, n <= 12', 'board[i][j] is a lowercase English letter.', '1 <= words.length <= 3 * 10^4', '1 <= words[i].length <= 10', 'words[i] consists of lowercase English letters.', 'All the strings of `words` are unique.'],
  },
  {
    id: '125',
    title: 'Alien Dictionary',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you. You are given a list of strings `words` from the alien language\'s dictionary, where the strings in `words` are sorted lexicographically by the rules of this new language. Return a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language\'s rules. If there is no solution, return "". If there are multiple solutions, return any of them.',
    starterCode: {
      python: 'def alien_order(words):\n  # Your code here\n  pass',
      javascript: 'function alienOrder(words) {\n  // Your code here\n}',
      java: 'class Solution {\n  public String alienOrder(String[] words) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    string alienOrder(vector<string>& words) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'words = ["wrt","wrf","er","ett","rftt"]', output: '"wertf"' },
      { input: 'words = ["z","x"]', output: '"zx"' },
      { input: 'words = ["z","x","z"]', output: '""' },
    ],
    constraints: ['1 <= words.length <= 100', '1 <= words[i].length <= 100', 'words[i] consists of only lowercase English letters.'],
  },
  {
    id: '126',
    title: 'Number of Connected Components in an Undirected Graph',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'You have a graph of `n` nodes. You are given an integer `n` and an array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between `ai` and `bi` in the graph. Return the number of connected components in the graph.',
    starterCode: {
      python: 'def count_components(n, edges):\n  # Your code here\n  pass',
      javascript: 'function countComponents(n, edges) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int countComponents(int n, int[][] edges) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int countComponents(int n, vector<vector<int>>& edges) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'n = 5, edges = [[0,1],[1,2],[3,4]]', output: '2' },
      { input: 'n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]', output: '1' },
    ],
    constraints: ['1 <= n <= 2000', '1 <= edges.length <= 5000', 'edges[i].length == 2', '0 <= ai, bi < n', 'ai != bi', 'There are no repeated edges.'],
  },
  {
    id: '127',
    title: 'Graph Valid Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'You have a graph of `n` nodes labeled from `0` to `n - 1`. You are given an integer `n` and a list of `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi`. Return `true` if the edges of the given graph make up a valid tree, and `false` otherwise.',
    starterCode: {
      python: 'def valid_tree(n, edges):\n  # Your code here\n  pass',
      javascript: 'function validTree(n, edges) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean validTree(int n, int[][] edges) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool validTree(int n, vector<vector<int>>& edges) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]', output: 'true' },
      { input: 'n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]', output: 'false' },
    ],
    constraints: ['1 <= n <= 2000', '0 <= edges.length <= 5000', 'edges[i].length == 2', '0 <= ai, bi < n', 'ai != bi', 'There are no repeated edges.'],
  },
  {
    id: '128',
    title: 'Meeting Rooms',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Given an array of meeting time intervals `intervals` where `intervals[i] = [starti, endi]`, determine if a person could attend all meetings.',
    starterCode: {
      python: 'def can_attend_meetings(intervals):\n  # Your code here\n  pass',
      javascript: 'function canAttendMeetings(intervals) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean canAttendMeetings(int[][] intervals) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool canAttendMeetings(vector<vector<int>>& intervals) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'intervals = [[0,30],[5,10],[15,20]]', output: 'false' },
      { input: 'intervals = [[7,10],[2,4]]', output: 'true' },
    ],
    constraints: ['0 <= intervals.length <= 10^4', 'intervals[i].length == 2', '0 <= starti < endi <= 10^6'],
  },
  {
    id: '129',
    title: 'Meeting Rooms II',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given an array of meeting time intervals `intervals` where `intervals[i] = [starti, endi]`, return the minimum number of conference rooms required.',
    starterCode: {
      python: 'def min_meeting_rooms(intervals):\n  # Your code here\n  pass',
      javascript: 'function minMeetingRooms(intervals) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int minMeetingRooms(int[][] intervals) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int minMeetingRooms(vector<vector<int>>& intervals) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'intervals = [[0,30],[5,10],[15,20]]', output: '2' },
      { input: 'intervals = [[7,10],[2,4]]', output: '1' },
    ],
    constraints: ['1 <= intervals.length <= 10^4', '0 <= starti < endi <= 10^6'],
  },
  {
    id: '130',
    title: 'Lowest Common Ancestor of a Binary Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.',
    starterCode: {
      python: '# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\ndef lowest_common_ancestor_bt(root, p, q):\n  # Your code here\n  pass',
      javascript: 'function lowestCommonAncestor(root, p, q) {\n  // Your code here\n}',
      java: 'class Solution {\n  public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1', output: '3' },
      { input: 'root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4', output: '5' },
    ],
    constraints: ['The number of nodes in the tree is in the range [2, 10^5].', '-10^9 <= Node.val <= 10^9', 'All Node.val are unique.', 'p != q', 'p and q will exist in the tree.'],
  },
  {
    id: '131',
    title: 'Time Based Key-Value Store',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key\'s value at a certain timestamp.',
    starterCode: {
      python: 'class TimeMap:\n\n    def __init__(self):\n        pass\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        pass\n\n    def get(self, key: str, timestamp: int) -> str:\n        pass\n',
      javascript: 'class TimeMap {\n    constructor() {}\n    set(key, value, timestamp) {}\n    get(key, timestamp) {}\n}',
      java: 'class TimeMap {\n    public TimeMap() {}\n    public void set(String key, String value, int timestamp) {}\n    public String get(String key, int timestamp) {}\n}',
      cpp: 'class TimeMap {\npublic:\n    TimeMap() {}\n    void set(string key, string value, int timestamp) {}\n    string get(string key, int timestamp) {}\n};',
    },
    examples: [],
    constraints: ['1 <= key.length, value.length <= 100', 'key and value consist of lowercase English letters and digits.', '1 <= timestamp <= 10^7', 'All the timestamps `set` are strictly increasing.', 'At most 2 * 10^5 calls will be made to `set` and `get`.'],
  },
  {
    id: '132',
    title: 'Accounts Merge',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 225,
    description: 'Given a list of `accounts` where each element `accounts[i]` is a list of strings, where the first element `accounts[i][0]` is a name, and the rest of the elements are emails representing emails of the account. Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order.',
    starterCode: {
      python: 'def accounts_merge(accounts):\n  # Your code here\n  pass',
      javascript: 'function accountsMerge(accounts) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<List<String>> accountsMerge(List<List<String>> accounts) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'accounts = [["John","johnsmith@mail.com","john_newyork@mail.com"],["John","johnsmith@mail.com","john00@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]', output: '[["John","john00@mail.com","john_newyork@mail.com","johnsmith@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]' },
    ],
    constraints: ['1 <= accounts.length <= 1000', '2 <= accounts[i].length <= 10', '1 <= accounts[i][j].length <= 30', 'accounts[i][0] consists of English letters.', 'accounts[i][j] (for j > 0) is a valid email.'],
  },
  {
    id: '133',
    title: 'Clone Graph',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Given a reference of a node in a connected undirected graph. Return a deep copy (clone) of the graph.',
    starterCode: {
      python: '# Definition for a Node.\n# class Node:\n#     def __init__(self, val = 0, neighbors = None):\n#         self.val = val\n#         self.neighbors = neighbors if neighbors is not None else []\n\ndef clone_graph(node):\n  # Your code here\n  pass',
      javascript: 'function cloneGraph(node) {\n  // Your code here\n}',
      java: 'class Solution {\n  public Node cloneGraph(Node node) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'adjList = [[2,4],[1,3],[2,4],[1,3]]', output: '[[2,4],[1,3],[2,4],[1,3]]' },
    ],
    constraints: ['The number of nodes in the graph is in the range [0, 100].', '1 <= Node.val <= 100', 'Node.val is unique for each node.', 'There are no repeated edges and no self-loops in the graph.', 'The Graph is connected and all nodes can be visited starting from the given node.'],
  },
  {
    id: '134',
    title: 'Pacific Atlantic Water Flow',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 225,
    description: 'There is an `m x n` rectangular island that borders both the Pacific Ocean and the Atlantic Ocean. The Pacific Ocean touches the island\'s left and top edges, and the Atlantic Ocean touches the island\'s right and bottom edges. The island is partitioned into a grid of square cells. You are given an `m x n` integer matrix `heights` where `heights[r][c]` represents the height above sea level of the cell at coordinate `(r, c)`. The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell\'s height is less than or equal to the current cell\'s height. Water can flow from any cell adjacent to an ocean into the ocean. Return a 2D list of grid coordinates `result` where `result[i] = [ri, ci]` denotes that rain water can flow from cell `(ri, ci)` to both the Pacific and Atlantic oceans.',
    starterCode: {
      python: 'def pacific_atlantic(heights):\n  # Your code here\n  pass',
      javascript: 'function pacificAtlantic(heights) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<List<Integer>> pacificAtlantic(int[][] heights) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]', output: '[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]' },
    ],
    constraints: ['m == heights.length', 'n == heights[r].length', '1 <= m, n <= 200', '0 <= heights[r][c] <= 10^5'],
  },
  {
    id: '135',
    title: 'Insert Interval',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'You are given an array of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]` represent the start and the end of the `i`th interval and `intervals` is sorted in ascending order by `starti`. You are also given an interval `newInterval = [start, end]` that represents the start and end of another interval. Insert `newInterval` into `intervals` such that `intervals` is still sorted in ascending order by `starti` and `intervals` still does not have any overlapping intervals (merge overlapping intervals if necessary).',
    starterCode: {
      python: 'def insert(intervals, newInterval):\n  # Your code here\n  pass',
      javascript: 'function insert(intervals, newInterval) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int[][] insert(int[][] intervals, int[] newInterval) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'intervals = [[1,3],[6,9]], newInterval = [2,5]', output: '[[1,5],[6,9]]' },
      { input: 'intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]', output: '[[1,2],[3,10],[12,16]]' },
    ],
    constraints: ['0 <= intervals.length <= 10^4', 'intervals[i].length == 2', '0 <= starti <= endi <= 10^5', 'intervals is sorted by starti in ascending order.', 'newInterval.length == 2', '0 <= start <= end <= 10^5'],
  },
  {
    id: '136',
    title: 'Non-overlapping Intervals',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given an array of intervals `intervals` where `intervals[i] = [starti, endi]`, return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.',
    starterCode: {
      python: 'def erase_overlap_intervals(intervals):\n  # Your code here\n  pass',
      javascript: 'function eraseOverlapIntervals(intervals) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int eraseOverlapIntervals(int[][] intervals) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int eraseOverlapIntervals(vector<vector<int>>& intervals) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'intervals = [[1,2],[2,3],[3,4],[1,3]]', output: '1' },
      { input: 'intervals = [[1,2],[1,2],[1,2]]', output: '2' },
      { input: 'intervals = [[1,2],[2,3]]', output: '0' },
    ],
    constraints: ['1 <= intervals.length <= 10^5', 'intervals[i].length == 2', '-5 * 10^4 <= starti < endi <= 5 * 10^4'],
  },
  {
    id: '137',
    title: 'Encode and Decode Strings',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.',
    starterCode: {
      python: 'class Codec:\n    def encode(self, strs):\n        # Your code here\n        pass\n\n    def decode(self, s):\n        # Your code here\n        pass\n',
      javascript: 'class Codec {\n    encode(strs) {\n        // Your code here\n    }\n\n    decode(s) {\n        // Your code here\n    }\n}',
      java: 'public class Codec {\n    // Encodes a list of strings to a single string.\n    public String encode(List<String> strs) {\n        // Your code here\n    }\n\n    // Decodes a single string to a list of strings.\n    public List<String> decode(String s) {\n        // Your code here\n    }\n}',
      cpp: 'class Codec {\npublic:\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        // Your code here\n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: '["Hello","World"]', output: '["Hello","World"]' },
      { input: '[""]', output: '[""]' },
    ],
    constraints: ['0 <= strs.length < 100', '0 <= strs[i].length < 200', 'strs[i] contains any possible characters out of 256 valid ASCII characters.'],
  },
  {
    id: '138',
    title: 'Longest Increasing Subsequence',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 225,
    description: 'Given an integer array `nums`, return the length of the longest strictly increasing subsequence.',
    starterCode: {
      python: 'def length_of_lis(nums):\n  # Your code here\n  pass',
      javascript: 'function lengthOfLIS(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int lengthOfLIS(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [10,9,2,5,3,7,101,18]', output: '4' },
      { input: 'nums = [0,1,0,3,2,3]', output: '4' },
      { input: 'nums = [7,7,7,7,7,7,7]', output: '1' },
    ],
    constraints: ['1 <= nums.length <= 2500', '-10^4 <= nums[i] <= 10^4'],
  },
  {
    id: '139',
    title: 'Longest Common Subsequence',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 225,
    description: 'Given two strings `text1` and `text2`, return the length of their longest common subsequence. If there is no common subsequence, return 0.',
    starterCode: {
      python: 'def longest_common_subsequence(text1, text2):\n  # Your code here\n  pass',
      javascript: 'function longestCommonSubsequence(text1, text2) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int longestCommonSubsequence(String text1, String text2) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'text1 = "abcde", text2 = "ace"', output: '3' },
      { input: 'text1 = "abc", text2 = "abc"', output: '3' },
      { input: 'text1 = "abc", text2 = "def"', output: '0' },
    ],
    constraints: ['1 <= text1.length, text2.length <= 1000', 'text1 and text2 consist of only lowercase English letters.'],
  },
  {
    id: '140',
    title: 'Combination Sum IV',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 200,
    description: 'Given an array of distinct integers `nums` and a target integer `target`, return the number of possible combinations that add up to `target`.',
    starterCode: {
      python: 'def combination_sum4(nums, target):\n  # Your code here\n  pass',
      javascript: 'function combinationSum4(nums, target) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int combinationSum4(int[] nums, int target) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int combinationSum4(vector<int>& nums, int target) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,3], target = 4', output: '7' },
      { input: 'nums = [9], target = 3', output: '0' },
    ],
    constraints: ['1 <= nums.length <= 200', '1 <= nums[i] <= 1000', 'All the elements of `nums` are unique.', '1 <= target <= 1000'],
  },
  {
    id: '141',
    title: 'House Robber II',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 200,
    description: 'You are a professional robber planning to rob houses along a street. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night. Given an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.',
    starterCode: {
      python: 'def rob2(nums):\n  # Your code here\n  pass',
      javascript: 'function rob2(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int rob(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int rob(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [2,3,2]', output: '3' },
      { input: 'nums = [1,2,3,1]', output: '4' },
      { input: 'nums = [1,2,3]', output: '3' },
    ],
    constraints: ['1 <= nums.length <= 100', '0 <= nums[i] <= 1000'],
  },
  {
    id: '142',
    title: 'Best Time to Buy and Sell Stock with Cooldown',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 225,
    description: 'You are given an array `prices` where `prices[i]` is the price of a given stock on the `i`th day. Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions: After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).',
    starterCode: {
      python: 'def max_profit_cooldown(prices):\n  # Your code here\n  pass',
      javascript: 'function maxProfit(prices) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int maxProfit(int[] prices) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'prices = [1,2,3,0,2]', output: '3' },
      { input: 'prices = [1]', output: '0' },
    ],
    constraints: ['1 <= prices.length <= 5000', '0 <= prices[i] <= 1000'],
  },
  {
    id: '143',
    title: 'Edit Distance',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 275,
    description: 'Given two strings `word1` and `word2`, return the minimum number of operations required to convert `word1` to `word2`. You have the following three operations permitted on a word: Insert a character, Delete a character, Replace a character.',
    starterCode: {
      python: 'def min_distance(word1, word2):\n  # Your code here\n  pass',
      javascript: 'function minDistance(word1, word2) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int minDistance(String word1, String word2) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int minDistance(string word1, string word2) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'word1 = "horse", word2 = "ros"', output: '3' },
      { input: 'word1 = "intention", word2 = "execution"', output: '5' },
    ],
    constraints: ['0 <= word1.length, word2.length <= 500', 'word1 and word2 consist of lowercase English letters.'],
  },
  {
    id: '144',
    title: 'Basic Calculator',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 250,
    description: 'Given a string `s` representing a valid expression, implement a basic calculator to evaluate it and return the result of the evaluation.',
    starterCode: {
      python: 'def calculate(s):\n  # Your code here\n  pass',
      javascript: 'function calculate(s) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int calculate(String s) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int calculate(string s) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "1 + 1"', output: '2' },
      { input: 's = " 2-1 + 2 "', output: '3' },
      { input: 's = "(1+(4+5+2)-3)+(6+8)"', output: '23' },
    ],
    constraints: ['1 <= s.length <= 3 * 10^5', 's consists of digits, \'+\', \'-\', \'(\', \')\', and \' \'.', 's represents a valid expression.'],
  },
  {
    id: '145',
    title: 'Sudoku Solver',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'Write a program to solve a Sudoku puzzle by filling the empty cells. A sudoku solution must satisfy all of the following rules: Each of the digits 1-9 must occur exactly once in each row. Each of the digits 1-9 must occur exactly once in each column. Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.',
    starterCode: {
      python: 'def solve_sudoku(board):\n  # Modify board in-place\n  pass',
      javascript: 'function solveSudoku(board) {\n  // Modify board in-place\n}',
      java: 'class Solution {\n  public void solveSudoku(char[][] board) {\n    // Modify board in-place\n  }\n}',
      cpp: 'class Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        // Modify board in-place\n    }\n};',
    },
    examples: [],
    constraints: ['board.length == 9', 'board[i].length == 9', 'board[i][j] is a digit or \'.\'', 'It is guaranteed that the input board has only one solution.'],
  },
  {
    id: '146',
    title: 'N-Queens',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. Given an integer `n`, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.',
    starterCode: {
      python: 'def solve_n_queens(n):\n  # Your code here\n  pass',
      javascript: 'function solveNQueens(n) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<List<String>> solveNQueens(int n) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<string>> solveNQueens(int n) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'n = 4', output: '[[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]' },
      { input: 'n = 1', output: '[["Q"]]' },
    ],
    constraints: ['1 <= n <= 9'],
  },
  {
    id: '147',
    title: 'Valid Sudoku',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: Each row must contain the digits 1-9 without repetition. Each column must contain the digits 1-9 without repetition. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.',
    starterCode: {
      python: 'def is_valid_sudoku(board):\n  # Your code here\n  pass',
      javascript: 'function isValidSudoku(board) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean isValidSudoku(char[][] board) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool isValidSudoku(vector<vector<char>>& board) {\n        // Your code here\n    }\n};',
    },
    examples: [],
    constraints: ['board.length == 9', 'board[i].length == 9', 'board[i][j] is a digit or \'.\''],
  },
  {
    id: '148',
    title: 'Spiral Matrix',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an `m x n` `matrix`, return all elements of the `matrix` in spiral order.',
    starterCode: {
      python: 'def spiral_order(matrix):\n  # Your code here\n  pass',
      javascript: 'function spiralOrder(matrix) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<Integer> spiralOrder(int[][] matrix) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'matrix = [[1,2,3],[4,5,6],[7,8,9]]', output: '[1,2,3,6,9,8,7,4,5]' },
      { input: 'matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]', output: '[1,2,3,4,8,12,11,10,9,5,6,7]' },
    ],
    constraints: ['m == matrix.length', 'n == matrix[i].length', '1 <= m, n <= 10', '-100 <= matrix[i][j] <= 100'],
  },
  {
    id: '149',
    title: 'Set Matrix Zeroes',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an `m x n` integer matrix `matrix`, if an element is 0, set its entire row and column to 0\'s. You must do it in-place.',
    starterCode: {
      python: 'def set_zeroes(matrix):\n  # Modify matrix in-place\n  pass',
      javascript: 'function setZeroes(matrix) {\n  // Modify matrix in-place\n}',
      java: 'class Solution {\n  public void setZeroes(int[][] matrix) {\n    // Modify matrix in-place\n  }\n}',
      cpp: 'class Solution {\npublic:\n    void setZeroes(vector<vector<int>>& matrix) {\n        // Modify matrix in-place\n    }\n};',
    },
    examples: [
      { input: 'matrix = [[1,1,1],[1,0,1],[1,1,1]]', output: '[[1,0,1],[0,0,0],[1,0,1]]' },
      { input: 'matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]', output: '[[0,0,0,0],[0,4,5,0],[0,3,1,0]]' },
    ],
    constraints: ['m == matrix.length', 'n == matrix[0].length', '1 <= m, n <= 200', '-2^31 <= matrix[i][j] <= 2^31 - 1'],
  },
  {
    id: '150',
    title: 'First Missing Positive',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 250,
    description: 'Given an unsorted integer array `nums`, return the smallest missing positive integer. You must implement an algorithm that runs in O(n) time and uses constant extra space.',
    starterCode: {
      python: 'def first_missing_positive(nums):\n  # Your code here\n  pass',
      javascript: 'function firstMissingPositive(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int firstMissingPositive(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int firstMissingPositive(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,0]', output: '3' },
      { input: 'nums = [3,4,-1,1]', output: '2' },
      { input: 'nums = [7,8,9,11,12]', output: '1' },
    ],
    constraints: ['1 <= nums.length <= 5 * 10^5', '-2^31 <= nums[i] <= 2^31 - 1'],
  },
  {
    id: '151',
    title: 'Largest Rectangle in Histogram',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 275,
    description: 'Given an array of integers `heights` representing the histogram\'s bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.',
    starterCode: {
      python: 'def largest_rectangle_area(heights):\n  # Your code here\n  pass',
      javascript: 'function largestRectangleArea(heights) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int largestRectangleArea(int[] heights) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int largestRectangleArea(vector<int>& heights) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'heights = [2,1,5,6,2,3]', output: '10' },
      { input: 'heights = [2,4]', output: '4' },
    ],
    constraints: ['1 <= heights.length <= 10^5', '0 <= heights[i] <= 10^4'],
  },
  {
    id: '152',
    title: 'Remove Nth Node From End of List',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given the `head` of a linked list, remove the `n`th node from the end of the list and return its head.',
    starterCode: {
      python: '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\ndef remove_nth_from_end(head, n):\n  # Your code here\n  pass',
      javascript: 'function removeNthFromEnd(head, n) {\n  // Your code here\n}',
      java: 'class Solution {\n  public ListNode removeNthFromEnd(ListNode head, int n) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'head = [1,2,3,4,5], n = 2', output: '[1,2,3,5]' },
      { input: 'head = [1], n = 1', output: '[]' },
      { input: 'head = [1,2], n = 1', output: '[1]' },
    ],
    constraints: ['The number of nodes in the list is `sz`.', '1 <= sz <= 30', '0 <= Node.val <= 100', '1 <= n <= sz'],
  },
  {
    id: '153',
    title: 'Sort List',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Given the `head` of a linked list, return the list after sorting it in ascending order.',
    starterCode: {
      python: '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\ndef sort_list(head):\n  # Your code here\n  pass',
      javascript: 'function sortList(head) {\n  // Your code here\n}',
      java: 'class Solution {\n  public ListNode sortList(ListNode head) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'head = [4,2,1,3]', output: '[1,2,3,4]' },
      { input: 'head = [-1,5,3,4,0]', output: '[-1,0,3,4,5]' },
    ],
    constraints: ['The number of nodes in the list is in the range [0, 5 * 10^4].', '-10^5 <= Node.val <= 10^5'],
  },
  {
    id: '154',
    title: 'Reorder List',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'You are given the head of a singly linked-list. The list can be represented as: L0 → L1 → … → Ln - 1 → Ln. Reorder the list to be on the following form: L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → … You may not modify the values in the list\'s nodes. Only nodes themselves may be changed.',
    starterCode: {
      python: '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\ndef reorder_list(head):\n  # Your code here\n  pass',
      javascript: 'function reorderList(head) {\n  // Your code here\n}',
      java: 'class Solution {\n  public void reorderList(ListNode head) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    void reorderList(ListNode* head) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'head = [1,2,3,4]', output: '[1,4,2,3]' },
      { input: 'head = [1,2,3,4,5]', output: '[1,5,2,4,3]' },
    ],
    constraints: ['The number of nodes in the list is in the range [1, 5 * 10^4].', '1 <= Node.val <= 1000'],
  },
  {
    id: '155',
    title: 'Min Stack',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.',
    starterCode: {
      python: 'class MinStack:\n\n    def __init__(self):\n        pass\n\n    def push(self, val: int) -> None:\n        pass\n\n    def pop(self) -> None:\n        pass\n\n    def top(self) -> int:\n        pass\n\n    def getMin(self) -> int:\n        pass\n',
      javascript: 'class MinStack {\n    constructor() {}\n    push(val) {}\n    pop() {}\n    top() {}\n    getMin() {}\n}',
      java: 'class MinStack {\n    public MinStack() {}\n    public void push(int val) {}\n    public void pop() {}\n    public int top() {}\n    public int getMin() {}\n}',
      cpp: 'class MinStack {\npublic:\n    MinStack() {}\n    void push(int val) {}\n    void pop() {}\n    int top() {}\n    int getMin() {}\n};',
    },
    examples: [],
    constraints: ['-2^31 <= val <= 2^31 - 1', 'Methods pop, top and getMin operations will always be called on non-empty stacks.', 'At most 3 * 10^4 calls will be made to push, pop, top, and getMin.'],
  },
  {
    id: '156',
    title: 'Basic Calculator II',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Given a string `s` which represents an expression, evaluate this expression and return its value. The integer division should truncate toward zero.',
    starterCode: {
      python: 'def calculate_ii(s):\n  # Your code here\n  pass',
      javascript: 'function calculate(s) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int calculate(String s) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int calculate(string s) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "3+2*2"', output: '7' },
      { input: 's = " 3/2 "', output: '1' },
      { input: 's = " 3+5 / 2 "', output: '5' },
    ],
    constraints: ['1 <= s.length <= 3 * 10^5', 's consists of integers and operators (\'+\', \'-\', \'*\', \'/\') separated by some number of spaces.', 's represents a valid expression.'],
  },
  {
    id: '157',
    title: 'Find the Duplicate Number',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive. There is only one repeated number in `nums`, return this repeated number. You must solve the problem without modifying the array `nums` and uses only constant extra space.',
    starterCode: {
      python: 'def find_duplicate(nums):\n  # Your code here\n  pass',
      javascript: 'function findDuplicate(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int findDuplicate(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int findDuplicate(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,3,4,2,2]', output: '2' },
      { input: 'nums = [3,1,3,4,2]', output: '3' },
    ],
    constraints: ['1 <= n <= 10^5', 'nums.length == n + 1', '1 <= nums[i] <= n', 'All the integers in `nums` appear only once except for precisely one integer which appears two or more times.'],
  },
  {
    id: '158',
    title: 'Daily Temperatures',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an array of integers `temperatures` represents the daily temperatures, return an array `answer` such that `answer[i]` is the number of days you have to wait after the `i`th day to get a warmer temperature. If there is no future day for which this is possible, keep `answer[i] == 0` instead.',
    starterCode: {
      python: 'def daily_temperatures(temperatures):\n  # Your code here\n  pass',
      javascript: 'function dailyTemperatures(temperatures) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int[] dailyTemperatures(int[] temperatures) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<int> dailyTemperatures(vector<int>& temperatures) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'temperatures = [73,74,75,71,69,72,76,73]', output: '[1,1,4,2,1,1,0,0]' },
      { input: 'temperatures = [30,40,50,60]', output: '[1,1,1,0]' },
    ],
    constraints: ['1 <= temperatures.length <= 10^5', '30 <= temperatures[i] <= 100'],
  },
  {
    id: '159',
    title: 'Task Scheduler',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Given a characters array `tasks`, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle. However, there is a non-negative integer `n` that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least `n` units of time between any two same tasks. Return the least number of units of times that the CPU will take to finish all the given tasks.',
    starterCode: {
      python: 'def least_interval(tasks, n):\n  # Your code here\n  pass',
      javascript: 'function leastInterval(tasks, n) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int leastInterval(char[] tasks, int n) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int leastInterval(vector<char>& tasks, int n) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'tasks = ["A","A","A","B","B","B"], n = 2', output: '8' },
      { input: 'tasks = ["A","A","A","B","B","B"], n = 0', output: '6' },
      { input: 'tasks = ["A","A","A","A","A","A","B","C","D","E","F","G"], n = 2', output: '16' },
    ],
    constraints: ['1 <= task.length <= 10^4', 'tasks[i] is an uppercase English letter.', 'The integer `n` is in the range [0, 100].'],
  },
  {
    id: '160',
    title: 'Intersection of Two Linked Lists',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Given the heads of two singly linked-lists `headA` and `headB`, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return `null`.',
    starterCode: {
      python: 'def get_intersection_node(headA, headB):\n  # Your code here\n  pass',
      javascript: 'function getIntersectionNode(headA, headB) {\n  // Your code here\n}',
      java: 'public class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        // Your code here\n    }\n}',
      cpp: 'class Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        // Your code here\n    }\n};',
    },
    examples: [],
    constraints: ['The number of nodes of listA is in the range [1, 3 * 10^4].', 'The number of nodes of listB is in the range [1, 3 * 10^4].', '1 <= Node.val <= 10^5', '0 <= skipA < listA.length', '0 <= skipB < listB.length', 'intersectVal == listA[skipA] == listB[skipB]', 'If listA and listB don\'t intersect, intersectVal must be 0.', 'If listA and listB intersect, skipA and skipB must be greater than 0.'],
  },
  {
    id: '161',
    title: 'Backspace String Compare',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given two strings s and t, return true if they are equal when both are typed into empty text editors. # means a backspace character.',
    starterCode: {
      python: 'def backspace_compare(s, t):\n  # Your code here\n  pass',
      javascript: 'function backspaceCompare(s, t) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean backspaceCompare(String s, String t) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool backspaceCompare(string s, string t) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 's = "ab#c", t = "ad#c"', output: 'true' },
        { input: 's = "ab##", t = "c#d#"', output: 'true' },
        { input: 's = "a#c", t = "b"', output: 'false' },
    ],
    constraints: ['1 <= s.length, t.length <= 200', 's and t only contain lowercase letters and \'#\' characters.'],
  },
  {
    id: '162',
    title: 'Find Peak Element',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'A peak element is an element that is strictly greater than its neighbors. Given a 0-indexed integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.',
    starterCode: {
      python: 'def find_peak_element(nums):\n  # Your code here\n  pass',
      javascript: 'function findPeakElement(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int findPeakElement(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int findPeakElement(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,3,1]', output: '2' },
      { input: 'nums = [1,2,1,3,5,6,4]', output: '5' },
    ],
    constraints: ['1 <= nums.length <= 1000', '-2^31 <= nums[i] <= 2^31 - 1', 'nums[i] != nums[i + 1] for all valid i.'],
  },
  {
    id: '163',
    title: 'Missing Ranges',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'You are given an inclusive range `[lower, upper]` and a sorted unique integer array `nums`, where all elements are in the inclusive range. A number `x` is considered missing if `x` is in the range `[lower, upper]` and `x` is not in `nums`. Return the smallest sorted list of ranges that cover every missing number exactly.',
    starterCode: {
      python: 'def find_missing_ranges(nums, lower, upper):\n  # Your code here\n  pass',
      javascript: 'function findMissingRanges(nums, lower, upper) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<String> findMissingRanges(int[] nums, int lower, int upper) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<string> findMissingRanges(vector<int>& nums, int lower, int upper) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [0,1,3,50,75], lower = 0, upper = 99', output: '["2","4->49","51->74","76->99"]' },
      { input: 'nums = [], lower = 1, upper = 1', output: '["1"]' },
    ],
    constraints: ['-10^9 <= lower <= upper <= 10^9', '0 <= nums.length <= 100', 'lower <= nums[i] <= upper', 'All values of `nums` are unique.'],
  },
  {
    id: '164',
    title: 'Kth Smallest Element in a BST',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given the `root` of a binary search tree, and an integer `k`, return the `k`th smallest value (1-indexed) of all the values of the nodes in the tree.',
    starterCode: {
      python: 'def kth_smallest(root, k):\n  # Your code here\n  pass',
      javascript: 'function kthSmallest(root, k) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int kthSmallest(TreeNode root, int k) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int kthSmallest(TreeNode* root, int k) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [3,1,4,null,2], k = 1', output: '1' },
      { input: 'root = [5,3,6,2,4,null,null,1], k = 3', output: '3' },
    ],
    constraints: ['The number of nodes in the tree is `n`.', '1 <= k <= n <= 10^4', '0 <= Node.val <= 10^4'],
  },
  {
    id: '165',
    title: 'Game of Life',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'According to Wikipedia\'s article: "The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970." The board is made up of an `m x n` grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules: 1. Any live cell with fewer than two live neighbors dies as if by under-population. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by over-population. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. Write a function to compute the next state (after one update) of the board given its current state. The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. You must do this in-place.',
    starterCode: {
      python: 'def game_of_life(board):\n  # Modify board in-place\n  pass',
      javascript: 'function gameOfLife(board) {\n  // Modify board in-place\n}',
      java: 'class Solution {\n  public void gameOfLife(int[][] board) {\n    // Modify board in-place\n  }\n}',
      cpp: 'class Solution {\npublic:\n    void gameOfLife(vector<vector<int>>& board) {\n        // Modify board in-place\n    }\n};',
    },
    examples: [
      { input: 'board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]', output: '[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]' },
    ],
    constraints: ['m == board.length', 'n == board[i].length', '1 <= m, n <= 25', 'board[i][j] is 0 or 1.'],
  },
  {
    id: '166',
    title: 'Partition Equal Subset Sum',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 225,
    description: 'Given a non-empty array `nums` containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.',
    starterCode: {
      python: 'def can_partition(nums):\n  # Your code here\n  pass',
      javascript: 'function canPartition(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean canPartition(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool canPartition(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,5,11,5]', output: 'true' },
      { input: 'nums = [1,2,3,5]', output: 'false' },
    ],
    constraints: ['1 <= nums.length <= 200', '1 <= nums[i] <= 100'],
  },
  {
    id: '167',
    title: 'String to Integer (atoi)',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Implement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer (similar to C/C++\'s `atoi` function).',
    starterCode: {
      python: 'def my_atoi(s):\n  # Your code here\n  pass',
      javascript: 'function myAtoi(s) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int myAtoi(String s) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int myAtoi(string s) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "42"', output: '42' },
      { input: 's = "   -42"', output: '-42' },
      { input: 's = "4193 with words"', output: '4193' },
    ],
    constraints: ['0 <= s.length <= 200', 's consists of English letters (lower-case and upper-case), digits (0-9), \' \', \'+\', \'-\', and \'.\'.'],
  },
  {
    id: '168',
    title: 'Spiral Matrix II',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given a positive integer `n`, generate an `n x n` `matrix` filled with elements from `1` to `n^2` in spiral order.',
    starterCode: {
      python: 'def generate_matrix(n):\n  # Your code here\n  pass',
      javascript: 'function generateMatrix(n) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int[][] generateMatrix(int n) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<int>> generateMatrix(int n) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'n = 3', output: '[[1,2,3],[8,9,4],[7,6,5]]' },
      { input: 'n = 1', output: '[[1]]' },
    ],
    constraints: ['1 <= n <= 20'],
  },
  {
    id: '169',
    title: 'Rotate List',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given the `head` of a linked list, rotate the list to the right by `k` places.',
    starterCode: {
      python: '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\ndef rotate_right(head, k):\n  # Your code here\n  pass',
      javascript: 'function rotateRight(head, k) {\n  // Your code here\n}',
      java: 'class Solution {\n  public ListNode rotateRight(ListNode head, int k) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'head = [1,2,3,4,5], k = 2', output: '[4,5,1,2,3]' },
      { input: 'head = [0,1,2], k = 4', output: '[2,0,1]' },
    ],
    constraints: ['The number of nodes in the list is in the range [0, 500].', '-100 <= Node.val <= 100', '0 <= k <= 2 * 10^9'],
  },
  {
    id: '170',
    title: 'Permutations II',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Given a collection of numbers, `nums`, that might contain duplicates, return all possible unique permutations in any order.',
    starterCode: {
      python: 'def permute_unique(nums):\n  # Your code here\n  pass',
      javascript: 'function permuteUnique(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<List<Integer>> permuteUnique(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<int>> permuteUnique(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,1,2]', output: '[[1,1,2], [1,2,1], [2,1,1]]' },
      { input: 'nums = [1,2,3]', output: '[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]' },
    ],
    constraints: ['1 <= nums.length <= 8', '-10 <= nums[i] <= 10'],
  },
  {
    id: '171',
    title: 'Subsets II',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given an integer array `nums` that may contain duplicates, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.',
    starterCode: {
      python: 'def subsets_with_dup(nums):\n  # Your code here\n  pass',
      javascript: 'function subsetsWithDup(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<List<Integer>> subsetsWithDup(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<int>> subsetsWithDup(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,2]', output: '[[],[1],[1,2],[1,2,2],[2],[2,2]]' },
      { input: 'nums = [0]', output: '[[],[0]]' },
    ],
    constraints: ['1 <= nums.length <= 10', '-10 <= nums[i] <= 10'],
  },
  {
    id: '172',
    title: 'Word Break II',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 275,
    description: 'Given a string `s` and a dictionary of strings `wordDict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.',
    starterCode: {
      python: 'def word_break_ii(s, wordDict):\n  # Your code here\n  pass',
      javascript: 'function wordBreak(s, wordDict) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<String> wordBreak(String s, List<String> wordDict) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<string> wordBreak(string s, vector<string>& wordDict) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "catsanddog", wordDict = ["cat","cats","and","sand","dog"]', output: '["cats and dog", "cat sand dog"]' },
      { input: 's = "pineapplepenapple", wordDict = ["apple","pen","applepen","pine","pineapple"]', output: '["pine apple pen apple", "pineapple pen apple", "pine applepen apple"]' },
    ],
    constraints: ['1 <= s.length <= 20', '1 <= wordDict.length <= 1000', '1 <= wordDict[i].length <= 10', 's and wordDict[i] consist of only lowercase English letters.', 'All the strings of wordDict are unique.'],
  },
  {
    id: '173',
    title: 'Binary Tree Right Side View',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given the `root` of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.',
    starterCode: {
      python: '# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\ndef right_side_view(root):\n  # Your code here\n  pass',
      javascript: 'function rightSideView(root) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<Integer> rightSideView(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<int> rightSideView(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [1,2,3,null,5,null,4]', output: '[1,3,4]' },
      { input: 'root = [1,null,3]', output: '[1,3]' },
      { input: 'root = []', output: '[]' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 100].', '-100 <= Node.val <= 100'],
  },
  {
    id: '174',
    title: 'Number of 1 Bits',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 50,
    description: 'Write a function that takes an unsigned integer and returns the number of \'1\' bits it has (also known as the Hamming weight).',
    starterCode: {
      python: 'def hamming_weight(n):\n  # Your code here\n  pass',
      javascript: 'function hammingWeight(n) {\n  // Your code here\n}',
      java: 'public class Solution {\n    // you need to treat n as an unsigned value\n    public int hammingWeight(int n) {\n        // Your code here\n    }\n}',
      cpp: 'class Solution {\npublic:\n    int hammingWeight(uint32_t n) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'n = 11', output: '3', explanation: 'The input binary string is 00000000000000000000000000001011' },
      { input: 'n = 128', output: '1', explanation: 'The input binary string is 00000000000000000000000010000000' },
    ],
    constraints: ['The input must be a binary string of length 32.'],
  },
  {
    id: '175',
    title: 'Counting Bits',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 125,
    description: 'Given an integer `n`, return an array `ans` of length `n + 1` such that for each `i` (0 <= i <= n), `ans[i]` is the number of `1`\'s in the binary representation of `i`.',
    starterCode: {
      python: 'def count_bits(n):\n  # Your code here\n  pass',
      javascript: 'function countBits(n) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int[] countBits(int n) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<int> countBits(int n) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'n = 2', output: '[0,1,1]' },
      { input: 'n = 5', output: '[0,1,1,2,1,2]' },
    ],
    constraints: ['0 <= n <= 10^5'],
  },
  {
    id: '176',
    title: 'Reverse Bits',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Reverse bits of a given 32 bits unsigned integer.',
    starterCode: {
      python: 'def reverse_bits(n):\n  # Your code here\n  pass',
      javascript: 'function reverseBits(n) {\n  // Your code here\n}',
      java: 'public class Solution {\n    // you need treat n as an unsigned value\n    public int reverseBits(int n) {\n        // Your code here\n    }\n}',
      cpp: 'class Solution {\npublic:\n    uint32_t reverseBits(uint32_t n) {\n        // Your code here\n    }\n};',
    },
    examples: [],
    constraints: ['The input must be a binary string of length 32'],
  },
  {
    id: '177',
    title: 'Sum of Two Integers',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given two integers `a` and `b`, return the sum of the two integers without using the operators `+` and `-`.',
    starterCode: {
      python: 'def get_sum(a, b):\n  # Your code here\n  pass',
      javascript: 'function getSum(a, b) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int getSum(int a, int b) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int getSum(int a, int b) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'a = 1, b = 2', output: '3' },
      { input: 'a = 2, b = 3', output: '5' },
    ],
    constraints: ['-1000 <= a, b <= 1000'],
  },
  {
    id: '178',
    title: 'Convert Sorted Array to Binary Search Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Given an integer array `nums` where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.',
    starterCode: {
      python: 'def sorted_array_to_bst(nums):\n  # Your code here\n  pass',
      javascript: 'function sortedArrayToBST(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public TreeNode sortedArrayToBST(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [-10,-3,0,5,9]', output: '[0,-3,9,-10,null,5]' },
      { input: 'nums = [1,3]', output: '[3,1]' },
    ],
    constraints: ['1 <= nums.length <= 10^4', '-10^4 <= nums[i] <= 10^4', '`nums` is sorted in a strictly increasing order.'],
  },
  {
    id: '179',
    title: 'Balanced Binary Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Given a binary tree, determine if it is height-balanced. A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.',
    starterCode: {
      python: 'def is_balanced(root):\n  # Your code here\n  pass',
      javascript: 'function isBalanced(root) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean isBalanced(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool isBalanced(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [3,9,20,null,null,15,7]', output: 'true' },
      { input: 'root = [1,2,2,3,3,null,null,4,4]', output: 'false' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 5000].', '-10^4 <= Node.val <= 10^4'],
  },
  {
    id: '180',
    title: 'Minimum Depth of Binary Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Given a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.',
    starterCode: {
      python: 'def min_depth(root):\n  # Your code here\n  pass',
      javascript: 'function minDepth(root) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int minDepth(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int minDepth(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [3,9,20,null,null,15,7]', output: '2' },
      { input: 'root = [2,null,3,null,4,null,5,null,6]', output: '5' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 10^5].', '-1000 <= Node.val <= 1000'],
  },
  {
    id: '181',
    title: 'Linked List Cycle II',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given the `head` of a linked list, return the node where the cycle begins. If there is no cycle, return `null`.',
    starterCode: {
      python: 'def detect_cycle(head):\n  # Your code here\n  pass',
      javascript: 'function detectCycle(head) {\n  // Your code here\n}',
      java: 'public class Solution {\n    public ListNode detectCycle(ListNode head) {\n        // Your code here\n    }\n}',
      cpp: 'class Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'head = [3,2,0,-4], pos = 1', output: 'tail connects to node index 1' },
      { input: 'head = [1,2], pos = 0', output: 'tail connects to node index 0' },
    ],
    constraints: ['The number of the nodes in the list is in the range [0, 10^4].', '-10^5 <= Node.val <= 10^5', 'pos is -1 or a valid index in the linked-list.'],
  },
  {
    id: '182',
    title: 'Construct Quad Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given a `n * n` matrix `grid` of `0`s and `1`s, where `0` represents `False` and `1` represents `True`, represent the grid using a Quad-Tree.',
    starterCode: {
      python: '# Definition for a QuadTree node.\n# class Node:\n#     def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n#         self.val = val\n#         self.isLeaf = isLeaf\n#         self.topLeft = topLeft\n#         self.topRight = topRight\n#         self.bottomLeft = bottomLeft\n#         self.bottomRight = bottomRight\n\ndef construct(grid):\n  # Your code here\n  pass',
      javascript: 'function construct(grid) {\n  // Your code here\n}',
      java: 'class Solution {\n  public Node construct(int[][] grid) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    Node* construct(vector<vector<int>>& grid) {\n        // Your code here\n    }\n};',
    },
    examples: [],
    constraints: ['n == grid.length == grid[i].length', 'n == 2^x where 0 <= x <= 6'],
  },
  {
    id: '183',
    title: 'Design Add and Search Words Data Structure',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Design a data structure that supports adding new words and finding if a string matches any previously added string.',
    starterCode: {
      python: 'class WordDictionary:\n\n    def __init__(self):\n        pass\n\n    def addWord(self, word: str) -> None:\n        pass\n\n    def search(self, word: str) -> bool:\n        pass\n',
      javascript: 'class WordDictionary {\n    constructor() {}\n    addWord(word) {}\n    search(word) {}\n}',
      java: 'class WordDictionary {\n    public WordDictionary() {}\n    public void addWord(String word) {}\n    public boolean search(String word) {}\n}',
      cpp: 'class WordDictionary {\npublic:\n    WordDictionary() {}\n    void addWord(string word) {}\n    bool search(string word) {}\n};',
    },
    examples: [],
    constraints: ['1 <= word.length <= 25', 'word in addWord consists of lowercase English letters.', 'word in search consist of \'.\' or lowercase English letters.', 'At most 50000 calls will be made to addWord and search.'],
  },
  {
    id: '184',
    title: 'Coin Change 2',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 225,
    description: 'You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.',
    starterCode: {
      python: 'def change(amount, coins):\n  # Your code here\n  pass',
      javascript: 'function change(amount, coins) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int change(int amount, int[] coins) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int change(int amount, vector<int>& coins) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'amount = 5, coins = [1,2,5]', output: '4' },
      { input: 'amount = 3, coins = [2]', output: '0' },
      { input: 'amount = 10, coins = [10]', output: '1' },
    ],
    constraints: ['1 <= coins.length <= 300', '1 <= coins[i] <= 5000', 'All the values of coins are unique.', '0 <= amount <= 5000'],
  },
  {
    id: '185',
    title: 'Find All Anagrams in a String',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given two strings `s` and `p`, return an array of all the start indices of `p`\'s anagrams in `s`. You may return the answer in any order.',
    starterCode: {
      python: 'def find_anagrams(s, p):\n  # Your code here\n  pass',
      javascript: 'function findAnagrams(s, p) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<Integer> findAnagrams(String s, String p) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<int> findAnagrams(string s, string p) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "cbaebabacd", p = "abc"', output: '[0,6]' },
      { input: 's = "abab", p = "ab"', output: '[0,1,2]' },
    ],
    constraints: ['1 <= s.length, p.length <= 3 * 10^4', 's and p consist of lowercase English letters.'],
  },
  {
    id: '186',
    title: 'Minimum Height Trees',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 225,
    description: 'A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree. Given a tree of `n` nodes labelled from `0` to `n - 1`, and an array of `n - 1` `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between the two nodes `ai` and `bi` in the tree, you can choose any node of the tree as the root. When you select a node `x` as the root, the result tree has height `h`. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Return a list of all MHTs\' root labels. You can return the answer in any order.',
    starterCode: {
      python: 'def find_min_height_trees(n, edges):\n  # Your code here\n  pass',
      javascript: 'function findMinHeightTrees(n, edges) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<int> findMinHeightTrees(vector<vector<int>>& edges) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'n = 4, edges = [[1,0],[1,2],[1,3]]', output: '[1]' },
      { input: 'n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]', output: '[3,4]' },
    ],
    constraints: ['1 <= n <= 2 * 10^4', 'edges.length == n - 1', '0 <= ai, bi < n', 'ai != bi', 'All the pairs `(ai, bi)` are distinct.', 'The given input is guaranteed to be a tree and there will be no repeated edges.'],
  },
  {
    id: '187',
    title: 'Shortest Palindrome',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'You are given a string `s`. You can convert `s` to a palindrome by adding characters in front of it. Return the shortest palindrome you can find by performing this transformation.',
    starterCode: {
      python: 'def shortest_palindrome(s):\n  # Your code here\n  pass',
      javascript: 'function shortestPalindrome(s) {\n  // Your code here\n}',
      java: 'class Solution {\n  public String shortestPalindrome(String s) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    string shortestPalindrome(string s) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "aacecaaa"', output: '"aaacecaaa"' },
      { input: 's = "abcd"', output: '"dcbabcd"' },
    ],
    constraints: ['0 <= s.length <= 5 * 10^4', 's consists of lowercase English letters only.'],
  },
  {
    id: '188',
    title: 'Best Time to Buy and Sell Stock IV',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `i`th day, and an integer `k`. Find the maximum profit you can achieve. You may complete at most `k` transactions.',
    starterCode: {
      python: 'def max_profit_k(k, prices):\n  # Your code here\n  pass',
      javascript: 'function maxProfit(k, prices) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int maxProfit(int k, int[] prices) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int maxProfit(int k, vector<int>& prices) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'k = 2, prices = [2,4,1]', output: '2' },
      { input: 'k = 2, prices = [3,2,6,5,0,3]', output: '7' },
    ],
    constraints: ['0 <= k <= 100', '0 <= prices.length <= 1000', '0 <= prices[i] <= 1000'],
  },
  {
    id: '189',
    title: 'Rotate Array',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 125,
    description: 'Given an array, rotate the array to the right by `k` steps, where `k` is non-negative.',
    starterCode: {
      python: 'def rotate_array(nums, k):\n  # Modify nums in-place\n  pass',
      javascript: 'function rotate(nums, k) {\n  // Modify nums in-place\n}',
      java: 'class Solution {\n  public void rotate(int[] nums, int k) {\n    // Modify nums in-place\n  }\n}',
      cpp: 'class Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        // Modify nums in-place\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,3,4,5,6,7], k = 3', output: '[5,6,7,1,2,3,4]' },
      { input: 'nums = [-1,-100,3,99], k = 2', output: '[3,99,-1,-100]' },
    ],
    constraints: ['1 <= nums.length <= 10^5', '-2^31 <= nums[i] <= 2^31 - 1', '0 <= k <= 10^5'],
  },
  {
    id: '190',
    title: 'Maximal Square',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 225,
    description: 'Given an `m x n` binary `matrix` filled with 0s and 1s, find the largest square containing only 1s and return its area.',
    starterCode: {
      python: 'def maximal_square(matrix):\n  # Your code here\n  pass',
      javascript: 'function maximalSquare(matrix) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int maximalSquare(char[][] matrix) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int maximalSquare(vector<vector<char>>& matrix) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]', output: '4' },
      { input: 'matrix = [["0","1"],["1","0"]]', output: '1' },
      { input: 'matrix = [["0"]]', output: '0' },
    ],
    constraints: ['m == matrix.length', 'n == matrix[i].length', '1 <= m, n <= 300', 'matrix[i][j] is \'0\' or \'1\'.'],
  },
  {
    id: '191',
    title: 'Integer to English Words',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 275,
    description: 'Convert a non-negative integer `num` to its English words representation.',
    starterCode: {
      python: 'def number_to_words(num):\n  # Your code here\n  pass',
      javascript: 'function numberToWords(num) {\n  // Your code here\n}',
      java: 'class Solution {\n  public String numberToWords(int num) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    string numberToWords(int num) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'num = 123', output: '"One Hundred Twenty Three"' },
      { input: 'num = 12345', output: '"Twelve Thousand Three Hundred Forty Five"' },
      { input: 'num = 1234567', output: '"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven"' },
    ],
    constraints: ['0 <= num <= 2^31 - 1'],
  },
  {
    id: '192',
    title: 'The Skyline Problem',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'A city\'s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.',
    starterCode: {
      python: 'def get_skyline(buildings):\n  # Your code here\n  pass',
      javascript: 'function getSkyline(buildings) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<List<Integer>> getSkyline(int[][] buildings) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]', output: '[[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]' },
    ],
    constraints: ['1 <= buildings.length <= 10^4', '0 <= lefti < righti <= 2^31 - 1', '1 <= heighti <= 2^31 - 1', 'buildings is sorted by lefti in non-decreasing order.'],
  },
  {
    id: '193',
    title: 'Contains Duplicate II',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Given an integer array `nums` and an integer `k`, return `true` if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and `abs(i - j) <= k`.',
    starterCode: {
      python: 'def contains_nearby_duplicate(nums, k):\n  # Your code here\n  pass',
      javascript: 'function containsNearbyDuplicate(nums, k) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean containsNearbyDuplicate(int[] nums, int k) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool containsNearbyDuplicate(vector<int>& nums, int k) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,3,1], k = 3', output: 'true' },
      { input: 'nums = [1,0,1,1], k = 1', output: 'true' },
      { input: 'nums = [1,2,3,1,2,3], k = 2', output: 'false' },
    ],
    constraints: ['1 <= nums.length <= 10^5', '-10^9 <= nums[i] <= 10^9', '0 <= k <= 10^5'],
  },
  {
    id: '194',
    title: 'Contains Duplicate III',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 250,
    description: 'You are given an integer array `nums` and two integers `indexDiff` and `valueDiff`. Find a pair of indices `(i, j)` such that `i != j`, `abs(i - j) <= indexDiff`, and `abs(nums[i] - nums[j]) <= valueDiff`. Return `true` if such a pair exists, otherwise return `false`.',
    starterCode: {
      python: 'def contains_nearby_almost_duplicate(nums, indexDiff, valueDiff):\n  # Your code here\n  pass',
      javascript: 'function containsNearbyAlmostDuplicate(nums, indexDiff, valueDiff) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean containsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool containsNearbyAlmostDuplicate(vector<int>& nums, int indexDiff, int valueDiff) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,3,1], indexDiff = 3, valueDiff = 0', output: 'true' },
      { input: 'nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3', output: 'false' },
    ],
    constraints: ['2 <= nums.length <= 10^5', '-2^31 <= nums[i] <= 2^31 - 1', '1 <= indexDiff <= nums.length', '0 <= valueDiff <= 2^31 - 1'],
  },
  {
    id: '195',
    title: 'Sliding Window Median',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values. You are given an integer array `nums` and an integer `k`. There is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position. Return the median of each window in the original array.',
    starterCode: {
      python: 'def median_sliding_window(nums, k):\n  # Your code here\n  pass',
      javascript: 'function medianSlidingWindow(nums, k) {\n  // Your code here\n}',
      java: 'class Solution {\n  public double[] medianSlidingWindow(int[] nums, int k) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<double> medianSlidingWindow(vector<int>& nums, int k) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,3,-1,-3,5,3,6,7], k = 3', output: '[1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]' },
    ],
    constraints: ['1 <= k <= nums.length <= 10^5', '-2^31 <= nums[i] <= 2^31 - 1'],
  },
  {
    id: '196',
    title: 'Text Justification',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 275,
    description: 'Given an array of strings `words` and a width `maxWidth`, format the text such that each line has exactly `maxWidth` characters and is fully (left and right) justified.',
    starterCode: {
      python: 'def full_justify(words, maxWidth):\n  # Your code here\n  pass',
      javascript: 'function fullJustify(words, maxWidth) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<String> fullJustify(String[] words, int maxWidth) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<string> fullJustify(vector<string>& words, int maxWidth) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'words = ["This", "is", "an", "example", "of", "text", "justification."], maxWidth = 16', output: '["This    is    an", "example  of text", "justification.  "]' },
    ],
    constraints: ['1 <= words.length <= 300', '1 <= words[i].length <= 20', 'words[i] consists of only English letters and symbols.', '1 <= maxWidth <= 100', 'words[i].length <= maxWidth'],
  },
  {
    id: '197',
    title: 'Reverse Nodes in k-Group',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 275,
    description: 'Given the `head` of a linked list, reverse the nodes of the list `k` at a time, and return the modified list.',
    starterCode: {
      python: 'def reverse_k_group(head, k):\n  # Your code here\n  pass',
      javascript: 'function reverseKGroup(head, k) {\n  // Your code here\n}',
      java: 'class Solution {\n  public ListNode reverseKGroup(ListNode head, int k) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'head = [1,2,3,4,5], k = 2', output: '[2,1,4,3,5]' },
      { input: 'head = [1,2,3,4,5], k = 3', output: '[3,2,1,4,5]' },
    ],
    constraints: ['The number of nodes in the list is `n`.', '1 <= k <= n <= 5000', '0 <= Node.val <= 1000'],
  },
  {
    id: '198',
    title: 'Maximum Frequency Stack',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 275,
    description: 'Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.',
    starterCode: {
      python: 'class FreqStack:\n\n    def __init__(self):\n        pass\n\n    def push(self, val: int) -> None:\n        pass\n\n    def pop(self) -> int:\n        pass\n',
      javascript: 'class FreqStack {\n    constructor() {}\n    push(val) {}\n    pop() {}\n}',
      java: 'class FreqStack {\n    public FreqStack() {}\n    public void push(int val) {}\n    public int pop() {}\n}',
      cpp: 'class FreqStack {\npublic:\n    FreqStack() {}\n    void push(int val) {}\n    int pop() {}\n};',
    },
    examples: [],
    constraints: ['0 <= val <= 10^9', 'At most 2 * 10^4 calls will be made to `push` and `pop`.', 'It is guaranteed that there will be at least one element in the stack before calling `pop`.'],
  },
  {
    id: '199',
    title: 'Wildcard Matching',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'Given an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for `?` and `*` where `?` matches any single character and `*` matches any sequence of characters (including the empty sequence).',
    starterCode: {
      python: 'def is_match_wildcard(s, p):\n  # Your code here\n  pass',
      javascript: 'function isMatch(s, p) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean isMatch(String s, String p) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "aa", p = "a"', output: 'false' },
      { input: 's = "aa", p = "*"', output: 'true' },
      { input: 's = "cb", p = "?a"', output: 'false' },
    ],
    constraints: ['0 <= s.length, p.length <= 2000', 's contains only lowercase English letters.', 'p contains only lowercase English letters, \'q\' or \'*\''],
  },
  {
    id: '200',
    title: 'Median of Two Sorted Arrays',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).',
    starterCode: {
      python: 'def find_median_sorted_arrays(nums1, nums2):\n  # Your code here\n  pass',
      javascript: 'function findMedianSortedArrays(nums1, nums2) {\n  // Your code here\n}',
      java: 'class Solution {\n  public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums1 = [1,3], nums2 = [2]', output: '2.00000' },
      { input: 'nums1 = [1,2], nums2 = [3,4]', output: '2.50000' },
    ],
    constraints: ['nums1.length == m', 'nums2.length == n', '0 <= m <= 1000', '0 <= n <= 1000', '1 <= m + n <= 2000', '-10^6 <= nums1[i], nums2[i] <= 10^6'],
  }
];

export const games: Game[] = [
    { id: '1', title: 'Monster Battle', description: 'Answer coding trivia to defeat monsters in a turn-based RPG.', icon: Swords, href: '#' },
    { id: '2', title: 'Debug Hunt', description: 'Find and fix bugs in code snippets against the clock.', icon: Bug, href: '#' },
    { id: '3', title: 'Code Jigsaw', description: 'Reassemble scrambled code blocks into a working program.', icon: Puzzle, href: '#' },
    { id: '4', title: 'Code Typer', description: 'Improve your typing speed and accuracy with code snippets.', icon: Keyboard, href: '#' },
    { id: '5', title: 'Output Prediction', description: 'Test your code comprehension by predicting the output.', icon: Eye, href: '#' },
    { id: '6', title: 'Concept Match', description: 'Match code snippets to their corresponding programming concepts.', icon: BrainCircuit, href: '#' },
    { id: '7', title: 'Algo Arena', description: 'Competitive programming challenges against other users.', icon: Gamepad2, href: '#' },
    { id: '8', title: 'Security Fortress', description: 'Identify and patch security vulnerabilities in a codebase.', icon: Castle, href: '#' },
];

    