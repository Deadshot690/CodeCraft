import type { User, Task, Game, Badge } from '@/lib/types';
import { PlaceHolderImages } from '@/lib/placeholder-images';
import { Swords, Gamepad2, Puzzle, Shield, BrainCircuit, Castle } from 'lucide-react';

export const user: User = {
  name: 'Alex',
  avatarUrl: 'https://picsum.photos/seed/avatar/100/100',
  xp: 750,
  level: 5,
  xpToNextLevel: 1000,
  streak: 12,
  badges: [
    { id: '1', name: 'Python Pro', icon: PlaceHolderImages[0].imageUrl, description: 'Master of Python' },
    { id: '2', name: 'JS Master', icon: PlaceHolderImages[1].imageUrl, description: 'Wizard of the Web' },
    { id: '3', name: '5-Day Streak', icon: PlaceHolderImages[2].imageUrl, description: 'On Fire!' },
    { id: '4', name: 'First Challenge', icon: PlaceHolderImages[3].imageUrl, description: 'The Journey Begins' },
  ],
};

export const tasks: Task[] = [
  {
    id: '1',
    title: 'Reverse a String',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 50,
    description: 'Write a function that takes a string as input and returns the string reversed.',
    starterCode: {
      python: 'def reverse_string(s):\n  # Your code here\n  pass',
      javascript: 'function reverseString(s) {\n  // Your code here\n}',
      java: 'class Solution {\n  public String reverseString(String s) {\n    // Your code here\n  }\n}',
      cpp: '#include <string>\n#include <algorithm>\n\nstd::string reverseString(std::string s) {\n  // Your code here\n  return s;\n}',
    },
    examples: [
        { input: 's = "hello"', output: '"olleh"' },
        { input: 's = "CodeCraft"', output: '"tfarCedoC"' }
    ],
    constraints: ['The input string\'s length is between 1 and 10^5.'],
  },
  {
    id: '2',
    title: 'Two Sum',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 100,
    description: 'Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice.',
    starterCode: {
        python: 'def two_sum(nums, target):\n  # Your code here\n  pass',
        javascript: 'function twoSum(nums, target) {\n  // Your code here\n}',
        java: 'class Solution {\n  public int[] twoSum(int[] nums, int target) {\n    // Your code here\n  }\n}',
        cpp: '#include <vector>\n\nstd::vector<int> twoSum(std::vector<int>& nums, int target) {\n  // Your code here\n}',
    },
    examples: [
        { input: 'nums = [2, 7, 11, 15], target = 9', output: '[0, 1]', explanation: 'Because nums[0] + nums[1] == 9, we return [0, 1].' },
    ],
    constraints: ['2 <= nums.length <= 10^4', '-10^9 <= nums[i] <= 10^9', '-10^9 <= target <= 10^9', 'Only one valid answer exists.'],
  },
  {
    id: '3',
    title: 'Simple API Fetch',
    category: 'Web Development',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Using the native `fetch` API in JavaScript, make a GET request to `https://api.example.com/data` and log the response to the console.',
    starterCode: {
      python: '# Python does not run in the browser for this challenge.\n# Please use JavaScript.',
      javascript: '// Your code here\nfetch(\'https://api.example.com/data\')\n  .then(response => response.json())\n  .then(data => {\n    console.log(data);\n    // Assume verification is handled elsewhere\n  });',
      java: '// Java does not run in the browser for this challenge.\n// Please use JavaScript.',
      cpp: '// C++ does not run in the browser for this challenge.\n// Please use JavaScript.',
    },
    examples: [],
    constraints: ['Use the Fetch API.', 'Do not use any external libraries like Axios.'],
  },
    {
    id: '4',
    title: 'SQL Injection Prevention',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Refactor the given Python code to prevent SQL injection vulnerabilities. The function should safely query the database for a user by their username.',
    starterCode: {
      python: 'import sqlite3\n\ndef get_user(username):\n  db = sqlite3.connect(":memory:")\n  cursor = db.cursor()\n  # Vulnerable code below\n  query = "SELECT * FROM users WHERE username = \'" + username + "\'"\n  cursor.execute(query)\n  return cursor.fetchone()\n\n# Your refactored, secure code here\n',
      javascript: '# N/A for this challenge.',
      java: '# N/A for this challenge.',
      cpp: '# N/A for this challenge.',
    },
    examples: [],
    constraints: ['Use parameterized queries or prepared statements.'],
  },
  {
    id: '5',
    title: 'Valid Parentheses',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given a string s containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type.',
    starterCode: {
        python: 'def is_valid(s):\n  # Your code here\n  pass',
        javascript: 'function isValid(s) {\n  // Your code here\n}',
        java: 'class Solution {\n  public boolean isValid(String s) {\n    // Your code here\n  }\n}',
        cpp: '#include <string>\n#include <stack>\n\nbool isValid(std::string s) {\n  // Your code here\n}',
    },
    examples: [
        { input: 's = "()"', output: 'true' },
        { input: 's = "()[]{}"', output: 'true' },
        { input: 's = "(]"', output: 'false' },
    ],
    constraints: ['1 <= s.length <= 10^4', 's consists of parentheses only \'()[]{}\'.'],
  },
  {
    id: '6',
    title: 'Merge Two Sorted Lists',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'You are given the heads of two sorted linked lists list1 and list2. Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.',
    starterCode: {
        python: '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\ndef merge_two_lists(list1, list2):\n  # Your code here\n  pass',
        javascript: '/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\nfunction mergeTwoLists(list1, list2) {\n  // Your code here\n}',
        java: '/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n  public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n    // Your code here\n  }\n}',
        cpp: '/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'list1 = [1,2,4], list2 = [1,3,4]', output: '[1,1,2,3,4,4]' },
        { input: 'list1 = [], list2 = []', output: '[]' },
        { input: 'list1 = [], list2 = [0]', output: '[0]' },
    ],
    constraints: ['The number of nodes in both lists is in the range [0, 50].', '-100 <= Node.val <= 100', 'Both list1 and list2 are sorted in non-decreasing order.'],
  },
  {
    id: '7',
    title: 'Maximum Subarray',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 125,
    description: 'Given an integer array nums, find the subarray with the largest sum, and return its sum.',
    starterCode: {
        python: 'def max_subarray(nums):\n  # Your code here\n  pass',
        javascript: 'function maxSubArray(nums) {\n  // Your code here\n}',
        java: 'class Solution {\n    public int maxSubArray(int[] nums) {\n        // Your code here\n    }\n}',
        cpp: '#include <vector>\n#include <algorithm>\n\nint maxSubArray(std::vector<int>& nums) {\n    // Your code here\n}',
    },
    examples: [
        { input: 'nums = [-2,1,-3,4,-1,2,1,-5,4]', output: '6', explanation: 'The subarray [4,-1,2,1] has the largest sum 6.' },
        { input: 'nums = [1]', output: '1', explanation: 'The subarray [1] has the largest sum 1.' },
        { input: 'nums = [5,4,-1,7,8]', output: '23', explanation: 'The subarray [5,4,-1,7,8] has the largest sum 23.' },
    ],
    constraints: ['1 <= nums.length <= 10^5', '-10^4 <= nums[i] <= 10^4'],
  },
  {
    id: '8',
    title: 'Longest Substring Without Repeating Characters',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given a string `s`, find the length of the longest substring without repeating characters.',
    starterCode: {
      python: 'def length_of_longest_substring(s):\n  # Your code here\n  pass',
      javascript: 'function lengthOfLongestSubstring(s) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int lengthOfLongestSubstring(String s) {\n    // Your code here\n  }\n}',
      cpp: '#include <string>\n#include <unordered_map>\n\nint lengthOfLongestSubstring(std::string s) {\n  // Your code here\n}',
    },
    examples: [
      { input: 's = "abcabcbb"', output: '3', explanation: 'The answer is "abc", with the length of 3.' },
      { input: 's = "bbbbb"', output: '1', explanation: 'The answer is "b", with the length of 1.' },
      { input: 's = "pwwkew"', output: '3', explanation: 'The answer is "wke", with the length of 3. Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.' },
    ],
    constraints: ['0 <= s.length <= 5 * 10^4', 's consists of English letters, digits, symbols and spaces.'],
  },
  {
    id: '9',
    title: 'Maximum Depth of Binary Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given the root of a binary tree, return its maximum depth. A binary tree\'s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.',
    starterCode: {
      python: '# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\ndef max_depth(root):\n  # Your code here\n  pass',
      javascript: '/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\nfunction maxDepth(root) {\n  // Your code here\n}',
      java: '/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n  public int maxDepth(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: '/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [3,9,20,null,null,15,7]', output: '3' },
      { input: 'root = [1,null,2]', output: '2' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 10^4].', '-100 <= Node.val <= 100'],
  },
  {
    id: '10',
    title: 'Climbing Stairs',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?',
    starterCode: {
      python: 'def climb_stairs(n):\n  # Your code here\n  pass',
      javascript: 'function climbStairs(n) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int climbStairs(int n) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int climbStairs(int n) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'n = 2', output: '2', explanation: 'There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps' },
      { input: 'n = 3', output: '3', explanation: 'There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step' },
    ],
    constraints: ['1 <= n <= 45'],
  },
  {
    id: '11',
    title: 'Linked List Cycle',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 100,
    description: 'Given `head`, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer.',
    starterCode: {
        python: '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\ndef has_cycle(head):\n  # Your code here\n  pass',
        javascript: '/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\nfunction hasCycle(head) {\n  // Your code here\n};',
        java: '/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        // Your code here\n    }\n}',
        cpp: '/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'head = [3,2,0,-4], pos = 1', output: 'true', explanation: 'There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).' },
        { input: 'head = [1,2], pos = 0', output: 'true', explanation: 'There is a cycle in the linked list, where the tail connects to the 0th node.' },
        { input: 'head = [1], pos = -1', output: 'false', explanation: 'There is no cycle in the linked list.' },
    ],
    constraints: ['The number of the nodes in the list is in the range [0, 10^4].', '-10^5 <= Node.val <= 10^5', 'pos is -1 or a valid index in the linked-list.'],
  },
  {
    id: '12',
    title: 'Invert Binary Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given the root of a binary tree, invert the tree, and return its root.',
    starterCode: {
      python: '# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\ndef invert_tree(root):\n  # Your code here\n  pass',
      javascript: '/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\nfunction invertTree(root) {\n  // Your code here\n}',
      java: '/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n        // Your code here\n    }\n}',
      cpp: '/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'root = [4,2,7,1,3,6,9]', output: '[4,7,2,9,6,3,1]' },
        { input: 'root = [2,1,3]', output: '[2,3,1]' },
        { input: 'root = []', output: '[]' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 100].', '-100 <= Node.val <= 100'],
  },
  {
    id: '13',
    title: 'Kth Largest Element in an Array',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an integer array `nums` and an integer `k`, return the `k`th largest element in the array. Note that it is the `k`th largest element in the sorted order, not the `k`th distinct element.',
    starterCode: {
      python: 'def find_kth_largest(nums, k):\n  # Your code here\n  pass',
      javascript: 'function findKthLargest(nums, k) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int findKthLargest(int[] nums, int k) {\n    // Your code here\n  }\n}',
      cpp: '#include <vector>\n\nclass Solution {\npublic:\n    int findKthLargest(std::vector<int>& nums, int k) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [3,2,1,5,6,4], k = 2', output: '5' },
      { input: 'nums = [3,2,3,1,2,4,5,5,6], k = 4', output: '4' },
    ],
    constraints: ['1 <= k <= nums.length <= 10^5', '-10^4 <= nums[i] <= 10^4'],
  },
  {
    id: '14',
    title: 'Number of Islands',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 200,
    description: 'Given an `m x n` 2D binary grid `grid` which represents a map of `\'1\'`s (land) and `\'0\'`s (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.',
    starterCode: {
      python: 'def num_islands(grid):\n  # Your code here\n  pass',
      javascript: 'function numIslands(grid) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int numIslands(char[][] grid) {\n    // Your code here\n  }\n}',
      cpp: '#include <vector>\n\nclass Solution {\npublic:\n    int numIslands(std::vector<std::vector<char>>& grid) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'grid = [\n  ["1","1","1","1","0"],\n  ["1","1","0","1","0"],\n  ["1","1","0","0","0"],\n  ["0","0","0","0","0"]\n]', output: '1' },
      { input: 'grid = [\n  ["1","1","0","0","0"],\n  ["1","1","0","0","0"],\n  ["0","0","1","0","0"],\n  ["0","0","0","1","1"]\n]', output: '3' },
    ],
    constraints: ['m == grid.length', 'n == grid[i].length', '1 <= m, n <= 300', 'grid[i][j] is \'0\' or \'1\'.'],
  },
  {
    id: '15',
    title: 'Product of Array Except Self',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`. The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer. You must write an algorithm that runs in O(n) time and without using the division operation.',
    starterCode: {
      python: 'def product_except_self(nums):\n  # Your code here\n  pass',
      javascript: 'function productExceptSelf(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int[] productExceptSelf(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: '#include <vector>\n\nclass Solution {\npublic:\n    std::vector<int> productExceptSelf(std::vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,3,4]', output: '[24,12,8,6]' },
      { input: 'nums = [-1,1,0,-3,3]', output: '[0,0,9,0,0]' },
    ],
    constraints: ['2 <= nums.length <= 10^5', '-30 <= nums[i] <= 30', 'The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.'],
  },
  {
    id: '16',
    title: 'Validate Binary Search Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given the `root` of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node\'s key. The right subtree of a node contains only nodes with keys greater than the node\'s key. Both the left and right subtrees must also be binary search trees.',
    starterCode: {
      python: '# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\ndef is_valid_bst(root):\n  # Your code here\n  pass',
      javascript: '/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\nfunction isValidBST(root) {\n  // Your code here\n}',
      java: '/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n  public boolean isValidBST(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: '/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [2,1,3]', output: 'true' },
      { input: 'root = [5,1,4,null,null,3,6]', output: 'false', explanation: 'The root node\'s value is 5 but its right child\'s value is 4.' },
    ],
    constraints: ['The number of nodes in the tree is in the range [1, 10^4].', '-2^31 <= Node.val <= 2^31 - 1'],
  },
  {
    id: '17',
    title: 'Container With Most Water',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `i`th line are `(i, 0)` and `(i, height[i])`. Find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store.',
    starterCode: {
      python: 'def max_area(height):\n  # Your code here\n  pass',
      javascript: 'function maxArea(height) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int maxArea(int[] height) {\n    // Your code here\n  }\n}',
      cpp: '#include <vector>\n\nclass Solution {\npublic:\n    int maxArea(std::vector<int>& height) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'height = [1,8,6,2,5,4,8,3,7]', output: '49', explanation: 'The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.' },
      { input: 'height = [1,1]', output: '1' },
    ],
    constraints: ['n == height.length', '2 <= n <= 10^5', '0 <= height[i] <= 10^4'],
  },
];

export const games: Game[] = [
    { id: '1', title: 'Code Rush', description: 'Timed typing game with missing code snippets.', icon: Gamepad2, href: '#' },
    { id: '2', title: 'Code Invaders', description: 'Space Invaders with coding MCQs.', icon: Swords, href: '#' },
    { id: '3', title: 'Debug Tower', description: 'Drag/drop fixes into a buggy code tower.', icon: Puzzle, href: '#' },
    { id: '4', title: 'Monster Battle', description: 'RPG fight with coding questions.', icon: Shield, href: '#' },
    { id: '5', title: 'Code Dungeon', description: 'Dungeon crawler with coding puzzles.', icon: Castle, href: '#' },
];
