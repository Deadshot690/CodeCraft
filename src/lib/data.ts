import type { User, Task, Game, Badge } from '@/lib/types';
import { PlaceHolderImages } from '@/lib/placeholder-images';
import { Swords, Gamepad2, Puzzle, Shield, BrainCircuit, Castle } from 'lucide-react';

export const user: User = {
  name: 'Alex',
  avatarUrl: 'https://picsum.photos/seed/avatar/100/100',
  xp: 750,
  level: 5,
  xpToNextLevel: 1000,
  streak: 12,
  badges: [
    { id: '1', name: 'Python Pro', icon: PlaceHolderImages[0].imageUrl, description: 'Master of Python' },
    { id: '2', name: 'JS Master', icon: PlaceHolderImages[1].imageUrl, description: 'Wizard of the Web' },
    { id: '3', name: '5-Day Streak', icon: PlaceHolderImages[2].imageUrl, description: 'On Fire!' },
    { id: '4', name: 'First Challenge', icon: PlaceHolderImages[3].imageUrl, description: 'The Journey Begins' },
  ],
};

export const tasks: Task[] = [
  {
    id: '1',
    title: 'Reverse a String',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 50,
    description: 'Write a function that takes a string as input and returns the string reversed.',
    starterCode: {
      python: 'def reverse_string(s):\n  # Your code here\n  pass',
      javascript: 'function reverseString(s) {\n  // Your code here\n}',
      java: 'class Solution {\n  public String reverseString(String s) {\n    // Your code here\n  }\n}',
      cpp: '#include <string>\n#include <algorithm>\n\nstd::string reverseString(std::string s) {\n  // Your code here\n  return s;\n}',
    },
    examples: [
        { input: 's = "hello"', output: '"olleh"' },
        { input: 's = "CodeCraft"', output: '"tfarCedoC"' }
    ],
    constraints: ['The input string\'s length is between 1 and 10^5.'],
  },
  {
    id: '2',
    title: 'Two Sum',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice.',
    starterCode: {
        python: 'def two_sum(nums, target):\n  # Your code here\n  pass',
        javascript: 'function twoSum(nums, target) {\n  // Your code here\n}',
        java: 'class Solution {\n  public int[] twoSum(int[] nums, int target) {\n    // Your code here\n  }\n}',
        cpp: '#include <vector>\n\nstd::vector<int> twoSum(std::vector<int>& nums, int target) {\n  // Your code here\n}',
    },
    examples: [
        { input: 'nums = [2, 7, 11, 15], target = 9', output: '[0,1]', explanation: 'Because nums[0] + nums[1] == 9, we return [0, 1].' },
        { input: 'nums = [3, 2, 4], target = 6', output: '[1,2]' },
        { input: 'nums = [3, 3], target = 6', output: '[0,1]' },
    ],
    constraints: ['2 <= nums.length <= 10^4', '-10^9 <= nums[i] <= 10^9', '-10^9 <= target <= 10^9', 'Only one valid answer exists.'],
  },
    {
    id: '4',
    title: 'SQL Injection Prevention',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Refactor the given Python code to prevent SQL injection vulnerabilities. The function should safely query the database for a user by their username.',
    starterCode: {
      python: 'import sqlite3\n\n# Assume db connection is passed or created elsewhere\n# def get_user(db, username):\n#  cursor = db.cursor()\n#  # Vulnerable code below\n#  query = "SELECT * FROM users WHERE username = \'" + username + "\'"\n#  cursor.execute(query)\n#  return cursor.fetchone()\n\ndef get_user_safe(db, username):\n  # Your refactored, secure code here\n  pass',
      javascript: '// N/A for this challenge.',
      java: '// N/A for this challenge.',
      cpp: '// N/A for this challenge.',
    },
    examples: [],
    constraints: ['Use parameterized queries or prepared statements.'],
  },
  {
    id: '5',
    title: 'Valid Parentheses',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given a string s containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type.',
    starterCode: {
        python: 'def is_valid(s):\n  # Your code here\n  pass',
        javascript: 'function isValid(s) {\n  // Your code here\n}',
        java: 'class Solution {\n  public boolean isValid(String s) {\n    // Your code here\n  }\n}',
        cpp: '#include <string>\n#include <stack>\n\nbool isValid(std::string s) {\n  // Your code here\n}',
    },
    examples: [
        { input: 's = "()"', output: 'true' },
        { input: 's = "()[]{}"', output: 'true' },
        { input: 's = "(]"', output: 'false' },
    ],
    constraints: ['1 <= s.length <= 10^4', 's consists of parentheses only \'()[]{}\'.'],
  },
  {
    id: '6',
    title: 'Merge Two Sorted Lists',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'You are given the heads of two sorted linked lists list1 and list2. Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.',
    starterCode: {
        python: '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\ndef merge_two_lists(list1, list2):\n  # Your code here\n  pass',
        javascript: '/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\nfunction mergeTwoLists(list1, list2) {\n  // Your code here\n}',
        java: '/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n  public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n    // Your code here\n  }\n}',
        cpp: '/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'list1 = [1,2,4], list2 = [1,3,4]', output: '[1,1,2,3,4,4]' },
        { input: 'list1 = [], list2 = []', output: '[]' },
        { input: 'list1 = [], list2 = [0]', output: '[0]' },
    ],
    constraints: ['The number of nodes in both lists is in the range [0, 50].', '-100 <= Node.val <= 100', 'Both list1 and list2 are sorted in non-decreasing order.'],
  },
  {
    id: '7',
    title: 'Maximum Subarray',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 125,
    description: 'Given an integer array nums, find the subarray with the largest sum, and return its sum.',
    starterCode: {
        python: 'def max_subarray(nums):\n  # Your code here\n  pass',
        javascript: 'function maxSubArray(nums) {\n  // Your code here\n}',
        java: 'class Solution {\n    public int maxSubArray(int[] nums) {\n        // Your code here\n    }\n}',
        cpp: '#include <vector>\n#include <algorithm>\n\nint maxSubArray(std::vector<int>& nums) {\n    // Your code here\n}',
    },
    examples: [
        { input: 'nums = [-2,1,-3,4,-1,2,1,-5,4]', output: '6', explanation: 'The subarray [4,-1,2,1] has the largest sum 6.' },
        { input: 'nums = [1]', output: '1', explanation: 'The subarray [1] has the largest sum 1.' },
        { input: 'nums = [5,4,-1,7,8]', output: '23', explanation: 'The subarray [5,4,-1,7,8] has the largest sum 23.' },
    ],
    constraints: ['1 <= nums.length <= 10^5', '-10^4 <= nums[i] <= 10^4'],
  },
  {
    id: '8',
    title: 'Longest Substring Without Repeating Characters',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given a string `s`, find the length of the longest substring without repeating characters.',
    starterCode: {
      python: 'def length_of_longest_substring(s):\n  # Your code here\n  pass',
      javascript: 'function lengthOfLongestSubstring(s) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int lengthOfLongestSubstring(String s) {\n    // Your code here\n  }\n}',
      cpp: '#include <string>\n#include <unordered_map>\n\nint lengthOfLongestSubstring(std::string s) {\n  // Your code here\n}',
    },
    examples: [
      { input: 's = "abcabcbb"', output: '3', explanation: 'The answer is "abc", with the length of 3.' },
      { input: 's = "bbbbb"', output: '1', explanation: 'The answer is "b", with the length of 1.' },
      { input: 's = "pwwkew"', output: '3', explanation: 'The answer is "wke", with the length of 3. Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.' },
    ],
    constraints: ['0 <= s.length <= 5 * 10^4', 's consists of English letters, digits, symbols and spaces.'],
  },
  {
    id: '9',
    title: 'Maximum Depth of Binary Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given the root of a binary tree, return its maximum depth. A binary tree\'s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.',
    starterCode: {
      python: '# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\ndef max_depth(root):\n  # Your code here\n  pass',
      javascript: '/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\nfunction maxDepth(root) {\n  // Your code here\n}',
      java: '/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) { this.val = val; this.right = right; }\n * }\n */\nclass Solution {\n  public int maxDepth(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: '/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [3,9,20,null,null,15,7]', output: '3' },
      { input: 'root = [1,null,2]', output: '2' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 10^4].', '-100 <= Node.val <= 100'],
  },
  {
    id: '10',
    title: 'Climbing Stairs',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?',
    starterCode: {
      python: 'def climb_stairs(n):\n  # Your code here\n  pass',
      javascript: 'function climbStairs(n) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int climbStairs(int n) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int climbStairs(int n) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'n = 2', output: '2', explanation: 'There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps' },
      { input: 'n = 3', output: '3', explanation: 'There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step' },
    ],
    constraints: ['1 <= n <= 45'],
  },
  {
    id: '11',
    title: 'Linked List Cycle',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 100,
    description: 'Given `head`, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer.',
    starterCode: {
        python: '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\ndef has_cycle(head):\n  # Your code here\n  pass',
        javascript: '/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\nfunction hasCycle(head) {\n  // Your code here\n};',
        java: '/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        // Your code here\n    }\n}',
        cpp: '/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'head = [3,2,0,-4], pos = 1', output: 'true', explanation: 'There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).' },
        { input: 'head = [1,2], pos = 0', output: 'true', explanation: 'There is a cycle in the linked list, where the tail connects to the 0th node.' },
        { input: 'head = [1], pos = -1', output: 'false', explanation: 'There is no cycle in the linked list.' },
    ],
    constraints: ['The number of the nodes in the list is in the range [0, 10^4].', '-10^5 <= Node.val <= 10^5', 'pos is -1 or a valid index in the linked-list.'],
  },
  {
    id: '12',
    title: 'Invert Binary Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given the root of a binary tree, invert the tree, and return its root.',
    starterCode: {
      python: '# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\ndef invert_tree(root):\n  # Your code here\n  pass',
      javascript: '/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = val;\n *     this.left = left;\n *     this.right = right;\n * }\n */\nfunction invertTree(root) {\n  // Your code here\n}',
      java: '/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) { this.val = val; this.right = right; }\n * }\n */\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n        // Your code here\n    }\n}',
      cpp: '/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'root = [4,2,7,1,3,6,9]', output: '[4,7,2,9,6,3,1]' },
        { input: 'root = [2,1,3]', output: '[2,3,1]' },
        { input: 'root = []', output: '[]' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 100].', '-100 <= Node.val <= 100'],
  },
  {
    id: '13',
    title: 'Kth Largest Element in an Array',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an integer array `nums` and an integer `k`, return the `k`th largest element in the array. Note that it is the `k`th largest element in the sorted order, not the `k`th distinct element.',
    starterCode: {
      python: 'def find_kth_largest(nums, k):\n  # Your code here\n  pass',
      javascript: 'function findKthLargest(nums, k) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int findKthLargest(int[] nums, int k) {\n    // Your code here\n  }\n}',
      cpp: '#include <vector>\n\nclass Solution {\npublic:\n    int findKthLargest(std::vector<int>& nums, int k) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [3,2,1,5,6,4], k = 2', output: '5' },
      { input: 'nums = [3,2,3,1,2,4,5,5,6], k = 4', output: '4' },
    ],
    constraints: ['1 <= k <= nums.length <= 10^5', '-10^4 <= nums[i] <= 10^4'],
  },
  {
    id: '14',
    title: 'Number of Islands',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 200,
    description: 'Given an `m x n` 2D binary grid `grid` which represents a map of `\'1\'`s (land) and `\'0\'`s (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.',
    starterCode: {
      python: 'def num_islands(grid):\n  # Your code here\n  pass',
      javascript: 'function numIslands(grid) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int numIslands(char[][] grid) {\n    // Your code here\n  }\n}',
      cpp: '#include <vector>\n\nclass Solution {\npublic:\n    int numIslands(std::vector<std::vector<char>>& grid) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'grid = [\n  ["1","1","1","1","0"],\n  ["1","1","0","1","0"],\n  ["1","1","0","0","0"],\n  ["0","0","0","0","0"]\n]', output: '1' },
      { input: 'grid = [\n  ["1","1","0","0","0"],\n  ["1","1","0","0","0"],\n  ["0","0","1","0","0"],\n  ["0","0","0","1","1"]\n]', output: '3' },
    ],
    constraints: ['m == grid.length', 'n == grid[i].length', '1 <= m, n <= 300', 'grid[i][j] is \'0\' or \'1\'.'],
  },
  {
    id: '15',
    title: 'Product of Array Except Self',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`. The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer. You must write an algorithm that runs in O(n) time and without using the division operation.',
    starterCode: {
      python: 'def product_except_self(nums):\n  # Your code here\n  pass',
      javascript: 'function productExceptSelf(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int[] productExceptSelf(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: '#include <vector>\n\nclass Solution {\npublic:\n    std::vector<int> productExceptSelf(std::vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,3,4]', output: '[24,12,8,6]' },
      { input: 'nums = [-1,1,0,-3,3]', output: '[0,0,9,0,0]' },
    ],
    constraints: ['2 <= nums.length <= 10^5', '-30 <= nums[i] <= 30', 'The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.'],
  },
  {
    id: '16',
    title: 'Validate Binary Search Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given the `root` of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node\'s key. The right subtree of a node contains only nodes with keys greater than the node\'s key. Both the left and right subtrees must also be binary search trees.',
    starterCode: {
      python: '# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\ndef is_valid_bst(root):\n  # Your code here\n  pass',
      javascript: '/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\nfunction isValidBST(root) {\n  // Your code here\n}',
      java: '/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) { this.val = val; this.right = right; }\n * }\n */\nclass Solution {\n  public boolean isValidBST(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: '/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [2,1,3]', output: 'true' },
      { input: 'root = [5,1,4,null,null,3,6]', output: 'false', explanation: 'The root node\'s value is 5 but its right child\'s value is 4.' },
    ],
    constraints: ['The number of nodes in the tree is in the range [1, 10^4].', '-2^31 <= Node.val <= 2^31 - 1'],
  },
  {
    id: '17',
    title: 'Container With Most Water',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `i`th line are `(i, 0)` and `(i, height[i])`. Find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store.',
    starterCode: {
      python: 'def max_area(height):\n  # Your code here\n  pass',
      javascript: 'function maxArea(height) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int maxArea(int[] height) {\n    // Your code here\n  }\n}',
      cpp: '#include <vector>\n\nclass Solution {\npublic:\n    int maxArea(std::vector<int>& height) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'height = [1,8,6,2,5,4,8,3,7]', output: '49', explanation: 'The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.' },
      { input: 'height = [1,1]', output: '1' },
    ],
    constraints: ['n == height.length', '2 <= n <= 10^5', '0 <= height[i] <= 10^4'],
  },
  {
    id: '18',
    title: 'Longest Palindromic Substring',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given a string `s`, return the longest palindromic substring in `s`.',
    starterCode: {
        python: 'def longest_palindrome(s):\n  # Your code here\n  pass',
        javascript: 'function longestPalindrome(s) {\n    // Your code here\n}',
        java: 'class Solution {\n    public String longestPalindrome(String s) {\n        // Your code here\n    }\n}',
        cpp: 'class Solution {\npublic:\n    string longestPalindrome(string s) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 's = "babad"', output: '"bab"', explanation: '"aba" is also a valid answer.' },
        { input: 's = "cbbd"', output: '"bb"' },
    ],
    constraints: ['1 <= s.length <= 1000', 's consist of only digits and English letters.'],
  },
  {
    id: '19',
    title: '3Sum',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given an integer array `nums`, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`. Notice that the solution set must not contain duplicate triplets.',
    starterCode: {
        python: 'def three_sum(nums):\n  # Your code here\n  pass',
        javascript: 'function threeSum(nums) {\n    // Your code here\n}',
        java: 'class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        // Your code here\n    }\n}',
        cpp: 'class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'nums = [-1,0,1,2,-1,-4]', output: '[[-1,-1,2],[-1,0,1]]' },
        { input: 'nums = [0,1,1]', output: '[]' },
        { input: 'nums = [0,0,0]', output: '[[0,0,0]]' },
    ],
    constraints: ['3 <= nums.length <= 3000', '-10^5 <= nums[i] <= 10^5'],
  },
  {
    id: '20',
    title: 'Binary Tree Inorder Traversal',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given the root of a binary tree, return the inorder traversal of its nodes\' values.',
    starterCode: {
        python: '# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\ndef inorder_traversal(root):\n  # Your code here\n  pass',
        javascript: 'function inorderTraversal(root) {\n    // Your code here\n}',
        java: 'class Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        // Your code here\n    }\n}',
        cpp: 'class Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'root = [1,null,2,3]', output: '[1,3,2]' },
        { input: 'root = []', output: '[]' },
        { input: 'root = [1]', output: '[1]' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 100].', '-100 <= Node.val <= 100'],
  },
  {
    id: '21',
    title: 'Word Break',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 225,
    description: 'Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation.',
    starterCode: {
        python: 'def word_break(s, word_dict):\n  # Your code here\n  pass',
        javascript: 'function wordBreak(s, wordDict) {\n    // Your code here\n}',
        java: 'class Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        // Your code here\n    }\n}',
        cpp: 'class Solution {\npublic:\n    bool wordBreak(string s, vector<string>& wordDict) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 's = "leetcode", wordDict = ["leet","code"]', output: 'true', explanation: 'Return true because "leetcode" can be segmented as "leet code".' },
        { input: 's = "applepenapple", wordDict = ["apple","pen"]', output: 'true', explanation: 'Return true because "applepenapple" can be segmented as "apple pen apple".' },
        { input: 's = "catsandog", wordDict = ["cats","dog","sand","and","cat"]', output: 'false' },
    ],
    constraints: ['1 <= s.length <= 300', '1 <= wordDict.length <= 1000', '1 <= wordDict[i].length <= 20', 's and wordDict[i] consist of only lowercase English letters.', 'All the strings of wordDict are unique.'],
  },
  {
    id: '22',
    title: 'Coin Change',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 200,
    description: 'You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin.',
    starterCode: {
        python: 'def coin_change(coins, amount):\n  # Your code here\n  pass',
        javascript: 'function coinChange(coins, amount) {\n    // Your code here\n}',
        java: 'class Solution {\n    public int coinChange(int[] coins, int amount) {\n        // Your code here\n    }\n}',
        cpp: 'class Solution {\npublic:\n    int coinChange(vector<int>& coins, int amount) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'coins = [1,2,5], amount = 11', output: '3', explanation: '11 = 5 + 5 + 1' },
        { input: 'coins = [2], amount = 3', output: '-1' },
        { input: 'coins = [1], amount = 0', output: '0' },
    ],
    constraints: ['1 <= coins.length <= 12', '1 <= coins[i] <= 2^31 - 1', '0 <= amount <= 10^4'],
  },
  {
    id: '23',
    title: 'LRU Cache',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 250,
    description: 'Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. Implement the `LRUCache` class: `LRUCache(int capacity)` initializes the LRU cache with positive size capacity. `int get(int key)` returns the value of the key if the key exists, otherwise returns -1. `void put(int key, int value)` updates the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.',
    starterCode: {
        python: 'class LRUCache:\n\n    def __init__(self, capacity: int):\n        # your code here\n        pass\n\n    def get(self, key: int) -> int:\n        # your code here\n        pass\n\n    def put(self, key: int, value: int) -> None:\n        # your code here\n        pass\n',
        javascript: 'class LRUCache {\n    constructor(capacity) {\n        // your code here\n    }\n\n    get(key) {\n        // your code here\n    }\n\n    put(key, value) {\n        // your code here\n    }\n}',
        java: 'class LRUCache {\n    public LRUCache(int capacity) {\n        // your code here\n    }\n    \n    public int get(int key) {\n        // your code here\n    }\n    \n    public void put(int key, int value) {\n        // your code here\n    }\n}',
        cpp: 'class LRUCache {\npublic:\n    LRUCache(int capacity) {\n        // your code here\n    }\n    \n    int get(int key) {\n        // your code here\n    }\n    \n    void put(int key, int value) {\n        // your code here\n    }\n};',
    },
    examples: [],
    constraints: ['1 <= capacity <= 3000', '0 <= key <= 10^4', '0 <= value <= 10^5', 'At most 2 * 10^5 calls will be made to get and put.'],
  },
  {
    id: '24',
    title: 'Implement Trie (Prefix Tree)',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 200,
    description: 'A trie or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. Implement the Trie class.',
    starterCode: {
        python: 'class Trie:\n\n    def __init__(self):\n        # your code here\n        pass\n\n    def insert(self, word: str) -> None:\n        # your code here\n        pass\n\n    def search(self, word: str) -> bool:\n        # your code here\n        pass\n\n    def startsWith(self, prefix: str) -> bool:\n        # your code here\n        pass\n',
        javascript: 'class Trie {\n    constructor() {\n        // your code here\n    }\n\n    insert(word) {\n        // your code here\n    }\n\n    search(word) {\n        // your code here\n    }\n\n    startsWith(prefix) {\n        // your code here\n    }\n}',
        java: 'class Trie {\n    public Trie() {\n        // your code here\n    }\n    \n    public void insert(String word) {\n        // your code here\n    }\n    \n    public boolean search(String word) {\n        // your code here\n    }\n    \n    public boolean startsWith(String prefix) {\n        // your code here\n    }\n}',
        cpp: 'class Trie {\npublic:\n    Trie() {\n        // your code here\n    }\n    \n    void insert(string word) {\n        // your code here\n    }\n    \n    bool search(string word) {\n        // your code here\n    }\n    \n    bool startsWith(string prefix) {\n        // your code here\n    }\n};',
    },
    examples: [],
    constraints: ['1 <= word.length, prefix.length <= 2000', 'word and prefix consist only of lowercase English letters.', 'At most 3 * 10^4 calls will be made to insert, search, and startsWith.'],
  },
  {
    id: '25',
    title: 'Course Schedule',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 225,
    description: 'There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. Return true if you can finish all courses. Otherwise, return false.',
    starterCode: {
        python: 'def can_finish(num_courses, prerequisites):\n  # Your code here\n  pass',
        javascript: 'function canFinish(numCourses, prerequisites) {\n    // Your code here\n}',
        java: 'class Solution {\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        // Your code here\n    }\n}',
        cpp: 'class Solution {\npublic:\n    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'numCourses = 2, prerequisites = [[1,0]]', output: 'true', explanation: 'There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.' },
        { input: 'numCourses = 2, prerequisites = [[1,0],[0,1]]', output: 'false', explanation: 'There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.' },
    ],
    constraints: ['1 <= numCourses <= 2000', '0 <= prerequisites.length <= 5000', 'prerequisites[i].length == 2', '0 <= ai, bi < numCourses', 'All the pairs prerequisites[i] are unique.'],
  },
  {
    id: '26',
    title: 'Group Anagrams',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an array of strings `strs`, group the anagrams together. You can return the answer in any order.',
    starterCode: {
      python: 'def group_anagrams(strs):\n  # Your code here\n  pass',
      javascript: 'function groupAnagrams(strs) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<List<String>> groupAnagrams(String[] strs) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'strs = ["eat","tea","tan","ate","nat","bat"]', output: '[["bat"],["nat","tan"],["ate","eat","tea"]]' },
      { input: 'strs = [""]', output: '[[""]]' },
      { input: 'strs = ["a"]', output: '[["a"]]' },
    ],
    constraints: ['1 <= strs.length <= 10^4', '0 <= strs[i].length <= 100', 'strs[i] consists of lowercase English letters.'],
  },
  {
    id: '27',
    title: 'Rotate Image',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'You are given an `n x n` 2D `matrix` representing an image. Rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.',
    starterCode: {
      python: 'def rotate(matrix):\n  # Your code here, modify matrix in-place.\n  pass',
      javascript: 'function rotate(matrix) {\n  // Your code here, modify matrix in-place.\n}',
      java: 'class Solution {\n  public void rotate(int[][] matrix) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'matrix = [[1,2,3],[4,5,6],[7,8,9]]', output: '[[7,4,1],[8,5,2],[9,6,3]]' },
      { input: 'matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]', output: '[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]' },
    ],
    constraints: ['matrix.length == n', 'matrix[i].length == n', '1 <= n <= 20', '-1000 <= matrix[i][j] <= 1000'],
  },
  {
    id: '28',
    title: 'Search in Rotated Sorted Array',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'There is an integer array `nums` sorted in ascending order (with distinct values). Prior to being passed to your function, `nums` is possibly rotated at an unknown pivot index `k`. Given the array `nums` after the possible rotation and an integer `target`, return the index of `target` if it is in `nums`, or -1 if it is not in `nums`. You must write an algorithm with O(log n) runtime complexity.',
    starterCode: {
      python: 'def search(nums, target):\n  # Your code here\n  pass',
      javascript: 'function search(nums, target) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int search(int[] nums, int target) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [4,5,6,7,0,1,2], target = 0', output: '4' },
      { input: 'nums = [4,5,6,7,0,1,2], target = 3', output: '-1' },
      { input: 'nums = [1], target = 0', output: '-1' },
    ],
    constraints: ['1 <= nums.length <= 5000', '-10^4 <= nums[i] <= 10^4', 'All values of nums are unique.', 'nums is an ascending array that is possibly rotated.', '-10^4 <= target <= 10^4'],
  },
  {
    id: '29',
    title: 'Minimum Window Substring',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 275,
    description: 'Given two strings `s` and `t` of lengths `m` and `n` respectively, return the minimum window substring of `s` such that every character in `t` (including duplicates) is included in the window. If there is no such substring, return the empty string `""`.',
    starterCode: {
      python: 'def min_window(s, t):\n  # Your code here\n  pass',
      javascript: 'function minWindow(s, t) {\n  // Your code here\n}',
      java: 'class Solution {\n  public String minWindow(String s, String t) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    string minWindow(string s, string t) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "ADOBECODEBANC", t = "ABC"', output: '"BANC"' },
      { input: 's = "a", t = "a"', output: '"a"' },
      { input: 's = "a", t = "aa"', output: '""' },
    ],
    constraints: ['m == s.length', 'n == t.length', '1 <= m, n <= 10^5', 's and t consist of uppercase and lowercase English letters.'],
  },
  {
    id: '30',
    title: 'Serialize and Deserialize Binary Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. Design an algorithm to serialize and deserialize a binary tree.',
    starterCode: {
      python: '# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        """Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        """\n        \n\n    def deserialize(self, data):\n        """Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        """\n',
      javascript: '/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n    \n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n    \n};',
      java: '/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        \n    }\n}',
      cpp: '/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        \n    }\n};',
    },
    examples: [
      { input: 'root = [1,2,3,null,null,4,5]', output: '[1,2,3,null,null,4,5]' },
    ],
    constraints: ['The number of nodes in the tree is in the range [0, 10^4].', '0 <= Node.val <= 1000', 'The same as the input tree.'],
  },
  {
    id: '31',
    title: 'Trapping Rain Water',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'Given `n` non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.',
    starterCode: {
      python: 'def trap(height):\n  # Your code here\n  pass',
      javascript: 'function trap(height) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int trap(int[] height) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int trap(vector<int>& height) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'height = [0,1,0,2,1,0,1,3,2,1,2,1]', output: '6' },
      { input: 'height = [4,2,0,3,2,5]', output: '9' },
    ],
    constraints: ['n == height.length', '1 <= n <= 2 * 10^4', '0 <= height[i] <= 10^5'],
  },
  {
    id: '32',
    title: 'Merge Intervals',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.',
    starterCode: {
      python: 'def merge(intervals):\n  # Your code here\n  pass',
      javascript: 'function merge(intervals) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int[][] merge(int[][] intervals) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'intervals = [[1,3],[2,6],[8,10],[15,18]]', output: '[[1,6],[8,10],[15,18]]' },
      { input: 'intervals = [[1,4],[4,5]]', output: '[[1,5]]' },
    ],
    constraints: ['1 <= intervals.length <= 10^4', 'intervals[i].length == 2', '0 <= starti <= endi <= 10^4'],
  },
  {
    id: '33',
    title: 'Lowest Common Ancestor of a BST',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.',
    starterCode: {
      python: '# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\ndef lowest_common_ancestor(root, p, q):\n  # Your code here\n  pass',
      javascript: 'function lowestCommonAncestor(root, p, q) {\n  // Your code here\n}',
      java: 'class Solution {\n  public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8', output: '6' },
      { input: 'root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4', output: '2' },
    ],
    constraints: ['The number of nodes in the tree is in the range [2, 10^5].', '-10^9 <= Node.val <= 10^9', 'All Node.val are unique.', 'p != q', 'p and q will exist in the BST.'],
  },
  {
    id: '34',
    title: 'Debounced Input Handler',
    category: 'Web Development',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Implement a debounce function in JavaScript. The function should take another function and a delay time as arguments. When the debounced function is called, it should not execute the original function until the specified delay has passed without any new calls.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: 'function debounce(func, delay) {\n  // Your code here\n}\n\n// Example usage:\n// const debouncedLog = debounce(() => console.log("Hello"), 1000);\n// debouncedLog();\n// debouncedLog();',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: 'Calling debounced function multiple times in quick succession', output: 'The wrapped function is only called once after the delay.', explanation: 'If a debounced function is called every 100ms with a 500ms delay, the inner function will only execute once, 500ms after the last call.'}
    ],
    constraints: ['Must be implemented in plain JavaScript.', 'Should handle any number of arguments passed to the original function.'],
  },
  {
    id: '35',
    title: 'Secure Password Hashing',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Write a Python function that takes a plain-text password and returns a securely hashed password using a modern, salted hashing algorithm like bcrypt. Also write a function to verify a password against a hash.',
    starterCode: {
      python: "import bcrypt\n\ndef hash_password(plain_text_password):\n  # Your code here to generate a salt and hash the password\n  pass\n\ndef check_password(plain_text_password, hashed_password):\n  # Your code here to check the password against the hash\n  pass",
      javascript: '// N/A for this challenge. Please use Python.',
      java: '// N/A for this challenge. Please use Python.',
      cpp: '// N/A for this challenge. Please use Python.',
    },
    examples: [
      { input: 'password = "mySuperSecretPa$$w0rd"', output: 'A valid bcrypt hash string (output will vary)', explanation: 'The hash must be generated with a random salt each time.'}
    ],
    constraints: ['Must use the `bcrypt` library.', 'The hash must be properly salted.'],
  },
  {
    id: '36',
    title: 'Calculate Precision and Recall',
    category: 'AI/ML',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Implement a Python function that calculates precision and recall for a binary classification model, given the number of true positives (TP), false positives (FP), and false negatives (FN).',
    starterCode: {
      python: 'def calculate_metrics(tp, fp, fn):\n  """\n  Calculates precision and recall.\n  Returns a tuple of (precision, recall).\n  Handle the case where the denominator is zero.\n  """\n  # Your code here\n  pass',
      javascript: '// N/A for this challenge.',
      java: '// N/A for this challenge.',
      cpp: '// N/A for this challenge.',
    },
    examples: [
      { input: 'tp=50, fp=10, fn=20', output: '(0.833, 0.714)', explanation: 'Precision = TP / (TP + FP) = 50/60. Recall = TP / (TP + FN) = 50/70.' },
      { input: 'tp=0, fp=0, fn=0', output: '(0.0, 0.0)', explanation: 'If there are no predictions or actual positives, metrics are 0.'}
    ],
    constraints: ['Return precision and recall rounded to 3 decimal places.', 'If a denominator is zero, the corresponding metric should be 0.0.'],
  },
  {
    id: '37',
    title: 'Longest Consecutive Sequence',
    category: 'Data Structures & Algorithms',
    difficulty: 'Advanced',
    xp: 200,
    description: 'Given an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence. You must write an algorithm that runs in O(n) time.',
    starterCode: {
      python: 'def longest_consecutive(nums):\n  # Your code here\n  pass',
      javascript: 'function longestConsecutive(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int longestConsecutive(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int longestConsecutive(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [100,4,200,1,3,2]', output: '4', explanation: 'The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.' },
      { input: 'nums = [0,3,7,2,5,8,4,6,0,1]', output: '9' },
    ],
    constraints: ['0 <= nums.length <= 10^5', '-10^9 <= nums[i] <= 10^9'],
  },
  {
    id: '38',
    title: 'XSS Prevention in React',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'You are given a React component that dangerously renders HTML from an untrusted source. Refactor it to prevent Cross-Site Scripting (XSS) attacks while still displaying the content safely.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: "import React from 'react';\n\n// Unsafe component\n// const UnsafeComponent = ({ content }) => {\n//   return <div dangerouslySetInnerHTML={{ __html: content }} />;\n// };\n\n// Your safe component here\nconst SafeComponent = ({ content }) => {\n  // Your code here to render content safely\n  return <div />;\n};\n\n// Example untrusted content:\n// const maliciousContent = 'Hello, world! <img src=x onerror=alert(\"XSS_ATTACK\") />';",
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: "content = '<b>Hello</b>'", output: "Renders the text '<b>Hello</b>' literally, not as bold text." },
      { input: "content = '<script>alert(1)</script>'", output: "Renders the script tag as plain text, preventing its execution." }
    ],
    constraints: ['Do not use `dangerouslySetInnerHTML`.', 'The solution should prevent any script execution from the `content` prop.'],
  },
  {
    id: '39',
    title: 'Palindrome Number',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 50,
    description: 'Given an integer x, return true if x is a palindrome, and false otherwise.',
    starterCode: {
      python: 'def is_palindrome(x):\n  # Your code here\n  pass',
      javascript: 'function isPalindrome(x) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean isPalindrome(int x) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool isPalindrome(int x) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'x = 121', output: 'true' },
      { input: 'x = -121', output: 'false' },
      { input: 'x = 10', output: 'false' },
    ],
    constraints: ['-2^31 <= x <= 2^31 - 1'],
  },
  {
    id: '40',
    title: 'Roman to Integer',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 75,
    description: 'Given a roman numeral, convert it to an integer.',
    starterCode: {
      python: 'def roman_to_int(s):\n  # Your code here\n  pass',
      javascript: 'function romanToInt(s) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int romanToInt(String s) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int romanToInt(string s) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "III"', output: '3' },
      { input: 's = "LVIII"', output: '58' },
      { input: 's = "MCMXCIV"', output: '1994' },
    ],
    constraints: ['1 <= s.length <= 15', 's contains only the characters (\'I\', \'V\', \'X\', \'L\', \'C\', \'D\', \'M\').', 'It is guaranteed that s is a valid roman numeral in the range [1, 3999].'],
  },
  {
    id: '41',
    title: 'Best Time to Buy and Sell Stock',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'You are given an array `prices` where `prices[i]` is the price of a given stock on the `i`th day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.',
    starterCode: {
      python: 'def max_profit(prices):\n  # Your code here\n  pass',
      javascript: 'function maxProfit(prices) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int maxProfit(int[] prices) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'prices = [7,1,5,3,6,4]', output: '5', explanation: 'Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.' },
      { input: 'prices = [7,6,4,3,1]', output: '0', explanation: 'In this case, no transactions are done and the max profit is 0.' },
    ],
    constraints: ['1 <= prices.length <= 10^5', '0 <= prices[i] <= 10^4'],
  },
  {
    id: '42',
    title: 'Symmetric Tree',
    category: 'Data Structures & Algorithms',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).',
    starterCode: {
      python: 'def is_symmetric(root):\n  # Your code here\n  pass',
      javascript: 'function isSymmetric(root) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean isSymmetric(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'root = [1,2,2,3,4,4,3]', output: 'true' },
      { input: 'root = [1,2,2,null,3,null,3]', output: 'false' },
    ],
    constraints: ['The number of nodes in the tree is in the range [1, 1000].', '-100 <= Node.val <= 100'],
  },
  {
    id: '43',
    title: 'Subsets',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Given an integer array `nums` of unique elements, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.',
    starterCode: {
      python: 'def subsets(nums):\n  # Your code here\n  pass',
      javascript: 'function subsets(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<List<Integer>> subsets(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,3]', output: '[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]' },
      { input: 'nums = [0]', output: '[[],[0]]' },
    ],
    constraints: ['1 <= nums.length <= 10', '-10 <= nums[i] <= 10', 'All the numbers of `nums` are unique.'],
  },
  {
    id: '44',
    title: 'Construct Binary Tree from Preorder and Inorder Traversal',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return the binary tree.',
    starterCode: {
      python: 'def build_tree(preorder, inorder):\n  # Your code here\n  pass',
      javascript: 'function buildTree(preorder, inorder) {\n  // Your code here\n}',
      java: 'class Solution {\n  public TreeNode buildTree(int[] preorder, int[] inorder) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]', output: '[3,9,20,null,null,15,7]' },
      { input: 'preorder = [-1], inorder = [-1]', output: '[-1]' },
    ],
    constraints: ['1 <= preorder.length <= 3000', 'inorder.length == preorder.length', '-3000 <= preorder[i], inorder[i] <= 3000', 'preorder and inorder consist of unique values.', 'Each value of inorder also appears in preorder.', 'preorder is guaranteed to be the preorder traversal of the tree.', 'inorder is guaranteed to be the inorder traversal of the tree.'],
  },
  {
    id: '45',
    title: 'Find Median from Data Stream',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'The median is the middle value in an ordered integer list. Implement the MedianFinder class.',
    starterCode: {
      python: 'class MedianFinder:\n\n    def __init__(self):\n        \n\n    def addNum(self, num: int) -> None:\n        \n\n    def findMedian(self) -> float:\n        \n',
      javascript: 'class MedianFinder {\n    constructor() {}\n    addNum(num) {}\n    findMedian() {}\n}',
      java: 'class MedianFinder {\n\n    public MedianFinder() {\n        \n    }\n    \n    public void addNum(int num) {\n        \n    }\n    \n    public double findMedian() {\n        \n    }\n}',
      cpp: 'class MedianFinder {\npublic:\n    MedianFinder() {\n        \n    }\n    \n    void addNum(int num) {\n        \n    }\n    \n    double findMedian() {\n        \n    }\n};',
    },
    examples: [
      { input: '["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]\n[[], [1], [2], [], [3], []]', output: '[null, null, null, 1.5, null, 2.0]' },
    ],
    constraints: ['-10^5 <= num <= 10^5', 'There will be at least one element in the data structure before calling findMedian.', 'At most 5 * 10^4 calls will be made to addNum and findMedian.'],
  },
  {
    id: '46',
    title: 'Word Ladder',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 275,
    description: 'A transformation sequence from word `beginWord` to `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that every adjacent pair of words differs by a single letter. Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return the number of words in the shortest transformation sequence from `beginWord` to `endWord`, or 0 if no such sequence exists.',
    starterCode: {
      python: 'def ladder_length(beginWord, endWord, wordList):\n  # Your code here\n  pass',
      javascript: 'function ladderLength(beginWord, endWord, wordList) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]', output: '5' },
      { input: 'beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]', output: '0' },
    ],
    constraints: ['1 <= beginWord.length <= 10', 'endWord.length == beginWord.length', '1 <= wordList.length <= 5000', 'wordList[i].length == beginWord.length', 'beginWord, endWord, and wordList[i] consist of lowercase English letters.', 'beginWord != endWord', 'All the words in wordList are unique.'],
  },
  {
    id: '47',
    title: 'Binary Tree Maximum Path Sum',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root. The path sum of a path is the sum of the node\'s values in the path. Given the `root` of a binary tree, return the maximum path sum of any non-empty path.',
    starterCode: {
      python: 'def max_path_sum(root):\n  # Your code here\n  pass',
      javascript: 'function maxPathSum(root) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int maxPathSum(TreeNode root) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n        // Your code here\n    }\n};',
    },
    examples: [
        { input: 'root = [1,2,3]', output: '6' },
        { input: 'root = [-10,9,20,null,null,15,7]', output: '42' },
    ],
    constraints: ['The number of nodes in the tree is in the range [1, 3 * 10^4].', '-1000 <= Node.val <= 1000'],
  },
  {
    id: '48',
    title: 'Regular Expression Matching',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 300,
    description: 'Given an input string `s` and a pattern `p`, implement regular expression matching with support for \'.\' and \'*\'. \'.\' Matches any single character. \'*\' Matches zero or more of the preceding element.',
    starterCode: {
      python: 'def is_match(s, p):\n  # Your code here\n  pass',
      javascript: 'function isMatch(s, p) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean isMatch(String s, String p) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "aa", p = "a"', output: 'false' },
      { input: 's = "aa", p = "a*"', output: 'true' },
      { input: 's = "ab", p = ".*"', output: 'true' },
    ],
    constraints: ['1 <= s.length <= 20', '1 <= p.length <= 20', 's contains only lowercase English letters.', 'p contains only lowercase English letters, \'.\', and \'*\'.', 'It is guaranteed for each appearance of the character \'*\', there will be a previous valid character to match.'],
  },
  {
    id: '49',
    title: 'Merge k Sorted Lists',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 275,
    description: 'You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.',
    starterCode: {
      python: 'def merge_k_lists(lists):\n  # Your code here\n  pass',
      javascript: 'function mergeKLists(lists) {\n  // Your code here\n}',
      java: 'class Solution {\n  public ListNode mergeKLists(ListNode[] lists) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'lists = [[1,4,5],[1,3,4],[2,6]]', output: '[1,1,2,3,4,4,5,6]' },
      { input: 'lists = []', output: '[]' },
      { input: 'lists = [[]]', output: '[]' },
    ],
    constraints: ['k == lists.length', '0 <= k <= 10^4', '0 <= lists[i].length <= 500', '-10^4 <= lists[i][j] <= 10^4', 'lists[i] is sorted in ascending order.', 'The sum of lists[i].length will not exceed 10^4.'],
  },
  {
    id: '50',
    title: 'Create a Custom React Hook for Fetching Data',
    category: 'Web Development',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Create a custom React hook `useFetch` that takes a URL as an argument and returns the fetched data, a loading state, and an error state. This hook should handle the entire lifecycle of a fetch request.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: "import { useState, useEffect } from 'react';\n\nfunction useFetch(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Your code here\n\n  return { data, loading, error };\n}\n\n// Example Usage:\n// function MyComponent() {\n//   const { data, loading, error } = useFetch('https://api.example.com/data');\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>Error!</p>;\n//   return <pre>{JSON.stringify(data)}</pre>;\n// }",
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['The hook must manage loading and error states.', 'It should re-fetch data if the URL changes.', 'Use the `useEffect` and `useState` hooks.'],
  },
  {
    id: '51',
    title: 'Build a Simple Tabs Component in React',
    category: 'Web Development',
    difficulty: 'Beginner',
    xp: 125,
    description: 'Create a reusable `Tabs` component in React. The component should take an array of tab items (each with a label and content) and display them correctly. Only the content of the active tab should be visible.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: "import React, { useState } from 'react';\n\n// items is an array of objects: [{ label: 'Tab 1', content: 'Content 1' }, ...]\nfunction Tabs({ items }) {\n  // Your code here\n  \n  return (\n    <div>\n      {/* Render tab buttons here */}\n      <div>\n        {/* Render active tab content here */}\n      </div>\n    </div>\n  );\n}",
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Clicking a tab label should switch the visible content.', 'The component should have a clear state for the active tab index.'],
  },
  {
    id: '52',
    title: 'Implement a Rate Limiter',
    category: 'Cybersecurity',
    difficulty: 'Advanced',
    xp: 250,
    description: 'Implement a simple in-memory rate limiter in Python. The function should limit the number of requests from a single IP address to a certain number per minute.',
    starterCode: {
      python: "import time\n\nclass RateLimiter:\n    def __init__(self, requests_per_minute):\n        self.requests_per_minute = requests_per_minute\n        self.timestamps = {}\n\n    def is_allowed(self, ip_address):\n        # Your code here to check if the request is allowed\n        pass\n",
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: 'limiter = RateLimiter(5); limiter.is_allowed("1.2.3.4") # Call 6 times in a minute', output: 'The first 5 calls return True, the 6th returns False.'}
    ],
    constraints: ['Must track timestamps of requests for each IP.', 'Old timestamps (older than 1 minute) should be discarded.'],
  },
  {
    id: '53',
    title: 'Content Security Policy (CSP) Setup',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Describe how you would set up a Content Security Policy (CSP) for a web application to only allow scripts from its own domain and from `apis.google.com`. What would the HTTP header look like?',
    starterCode: {
      python: "# Provide the answer as a comment\n# HTTP Header:",
      javascript: "// Provide the answer as a comment\n// HTTP Header:",
      java: "// Provide the answer as a comment\n// HTTP Header:",
      cpp: "// Provide the answer as a comment\n// HTTP Header:",
    },
    examples: [
      { input: 'Requirement: Allow scripts from self and apis.google.com', output: "Content-Security-Policy: script-src 'self' apis.google.com;"}
    ],
    constraints: ['Your answer should be the value of the `Content-Security-Policy` header.'],
  },
  {
    id: '54',
    title: 'Implement Gradient Descent',
    category: 'AI/ML',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Implement the gradient descent algorithm from scratch in Python to find the minimum of a simple quadratic function, `f(x) = x^2`. The function should take a starting point, learning rate, and number of iterations as input.',
    starterCode: {
      python: 'def gradient_descent(start_x, learning_rate, n_iterations):\n  """\n  Performs gradient descent to find the minimum of f(x) = x^2.\n  The derivative of x^2 is 2x.\n  """\n  x = start_x\n  # Your code here\n  \n  return x',
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: 'start_x=10, learning_rate=0.1, n_iterations=50', output: 'A value very close to 0.0' }
    ],
    constraints: ['The update rule for gradient descent is: x = x - learning_rate * gradient.'],
  },
  {
    id: '55',
    title: 'K-Means Clustering from Scratch',
    category: 'AI/ML',
    difficulty: 'Advanced',
    xp: 250,
    description: 'Implement the K-Means clustering algorithm in Python. Your function should take a dataset (as a list of lists/numpy array) and the number of clusters (k) as input. It should return the final centroids and the cluster assignments for each data point.',
    starterCode: {
      python: 'import random\nimport numpy as np\n\ndef k_means(data, k, max_iterations=100):\n  # 1. Initialize centroids randomly\n  \n  # 2. Loop for max_iterations:\n  #    a. Assign points to the nearest centroid\n  #    b. Update centroids to be the mean of assigned points\n  \n  # Your code here\n  pass',
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Your implementation should handle 2D data points.', 'You will need functions to calculate Euclidean distance.'],
  },
  {
    id: '56',
    title: 'Implement a Promise-based API Client',
    category: 'Web Development',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Create a simple JavaScript class `ApiClient` that uses `fetch` and Promises to make GET and POST requests. It should have `get(url)` and `post(url, data)` methods.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: 'class ApiClient {\n  async get(url) {\n    // Your code here\n  }\n\n  async post(url, data) {\n    // Your code here\n  }\n}',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: "const client = new ApiClient(); client.get('https://api.example.com/posts/1');", output: 'Returns a Promise that resolves with the post data.'}
    ],
    constraints: ['Methods must return Promises.', 'Handle potential network errors by rejecting the promise.', 'For POST requests, set the correct headers (`Content-Type: application/json`).'],
  },
  {
    id: '57',
    title: 'Sanitize User Input to Prevent DOM-based XSS',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Write a JavaScript function that takes a string of user input and sanitizes it to prevent DOM-based XSS. The function should remove any HTML tags from the string.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: 'function sanitizeInput(input) {\n  // Your code here to remove HTML tags\n}',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: "'Hello <b>world</b>'", output: "'Hello world'" },
      { input: "'<img src=x onerror=alert(1)>'", output: "''" },
    ],
    constraints: ['The simplest, most effective way is to use a regular expression to strip all tags.'],
  },
  {
    id: '58',
    title: 'Implement a Naive Bayes Classifier',
    category: 'AI/ML',
    difficulty: 'Advanced',
    xp: 275,
    description: 'Implement a simple Gaussian Naive Bayes classifier in Python from scratch. It should have a `fit` method to train on data and a `predict` method to classify new data points.',
    starterCode: {
      python: 'import numpy as np\n\nclass NaiveBayesClassifier:\n    def fit(self, X, y):\n        # Your code to calculate mean, var, and prior for each class\n        pass\n\n    def predict(self, X):\n        # Your code to predict the class for X\n        pass\n',
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Assume features are continuous and normally distributed (Gaussian).', 'The `fit` method should store the necessary statistics.', 'The `predict` method should use Bayes\' theorem to find the most likely class.'],
  },
  {
    id: '59',
    title: 'Jump Game',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'You are given an integer array nums. You are initially positioned at the array\'s first index, and each element in the array represents your maximum jump length at that position. Return true if you can reach the last index, or false otherwise.',
    starterCode: {
      python: 'def can_jump(nums):\n  # Your code here\n  pass',
      javascript: 'function canJump(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public boolean canJump(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    bool canJump(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [2,3,1,1,4]', output: 'true', explanation: 'Jump 1 step from index 0 to 1, then 3 steps to the last index.' },
      { input: 'nums = [3,2,1,0,4]', output: 'false', explanation: 'You will always arrive at index 3. Its maximum jump length is 0, which makes it impossible to reach the last index.' },
    ],
    constraints: ['1 <= nums.length <= 10^4', '0 <= nums[i] <= 10^5'],
  },
  {
    id: '60',
    title: 'Unique Paths',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time. Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.',
    starterCode: {
      python: 'def unique_paths(m, n):\n  # Your code here\n  pass',
      javascript: 'function uniquePaths(m, n) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int uniquePaths(int m, int n) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'm = 3, n = 7', output: '28' },
      { input: 'm = 3, n = 2', output: '3', explanation: 'From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. Right -> Down -> Down 2. Down -> Down -> Right 3. Down -> Right -> Down' },
    ],
    constraints: ['1 <= m, n <= 100'],
  },
  {
    id: '61',
    title: 'Throttled API Caller',
    category: 'Web Development',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Implement a throttle function in JavaScript. The function should ensure that the wrapped function is called at most once per specified time interval, even if it\'s invoked multiple times.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: 'function throttle(func, limit) {\n  // Your code here\n}\n\n// Example usage:\n// const throttledScroll = throttle(() => console.log("Scrolled!"), 1000);\n// window.addEventListener("scroll", throttledScroll);',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: 'Calling a throttled function 10 times in 1 second with a 500ms limit', output: 'The wrapped function is only called twice.' }
    ],
    constraints: ['Must be implemented in plain JavaScript.', 'Should handle the case where the function is called after the throttle period has ended.'],
  },
  {
    id: '62',
    title: 'CSRF Token Implementation',
    category: 'Cybersecurity',
    difficulty: 'Advanced',
    xp: 225,
    description: 'Describe the Synchronizer Token Pattern for preventing Cross-Site Request Forgery (CSRF). Explain how a token is generated, where it is stored, and how the server validates it for a state-changing request (e.g., a form submission).',
    starterCode: {
      python: '# Describe the steps in comments.\n# 1. Token Generation:\n#\n# 2. Token Storage & Transmission:\n#\n# 3. Token Validation:\n#',
      javascript: '// Describe the steps in comments.\n// 1. Token Generation:\n//\n// 2. Token Storage & Transmission:\n//\n// 3. Token Validation:\n//',
      java: '// Describe the steps in comments.\n// 1. Token Generation:\n//\n// 2. Token Storage & Transmission:\n//\n// 3. Token Validation:\n//',
      cpp: '// Describe the steps in comments.\n// 1. Token Generation:\n//\n// 2. Token Storage & Transmission:\n//\n// 3. Token Validation:\n//',
    },
    examples: [],
    constraints: ['Your answer should describe the complete lifecycle of a CSRF token in this pattern.'],
  },
  {
    id: '63',
    title: 'Decision Tree Classifier from Scratch',
    category: 'AI/ML',
    difficulty: 'Expert',
    xp: 300,
    description: 'Implement a basic Decision Tree classifier in Python for a dataset with categorical features. Focus on implementing the functions to find the best split (using information gain or Gini impurity) and to build the tree recursively.',
    starterCode: {
      python: 'import numpy as np\n\nclass DecisionTree:\n    def __init__(self, max_depth=5):\n        # Your init code here\n        pass\n\n    def _gini_impurity(self, y):\n        # Calculate Gini impurity\n        pass\n\n    def _information_gain(self, y, x_feature, threshold):\n        # Calculate information gain\n        pass\n\n    def _best_split(self, X, y):\n        # Find the best feature and threshold to split on\n        pass\n\n    def fit(self, X, y):\n        # Build the tree recursively\n        pass\n\n    def predict(self, X):\n        # Predict labels for new data\n        pass\n',
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Implement either Gini impurity or information gain.', 'The tree should handle stopping conditions like max depth or pure nodes.'],
  },
  {
    id: '64',
    title: 'React Context API for Theme Switching',
    category: 'Web Development',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Implement a theme switcher (e.g., light/dark mode) for a React application using the Context API. Create a `ThemeContext`, a `ThemeProvider` component, and a `useTheme` custom hook.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: "import React, { createContext, useContext, useState } from 'react';\n\n// 1. Create the context\nconst ThemeContext = createContext();\n\n// 2. Create the provider component\nexport function ThemeProvider({ children }) {\n  // Your state logic here\n  return (\n    <ThemeContext.Provider value={/* value */}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\n// 3. Create the custom hook\nexport function useTheme() {\n  // Your hook logic here\n}",
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['The `ThemeProvider` should manage the current theme state.', 'The `useTheme` hook should provide the current theme and a function to toggle it.', 'Descendant components should be able to consume the context.'],
  },
  {
    id: '65',
    title: 'Decode Ways',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'A message containing letters from A-Z can be encoded into numbers using the following mapping: \'A\' -> 1, \'B\' -> 2, ..., \'Z\' -> 26. Given a string `s` containing only digits, return the number of ways to decode it.',
    starterCode: {
      python: 'def num_decodings(s):\n  # Your code here\n  pass',
      javascript: 'function numDecodings(s) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int numDecodings(String s) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    int numDecodings(string s) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 's = "12"', output: '2', explanation: '"12" could be decoded as "AB" (1 2) or "L" (12).' },
      { input: 's = "226"', output: '3', explanation: '"226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).' },
      { input: 's = "06"', output: '0', explanation: '"06" cannot be mapped to "F" because of the leading zero.' },
    ],
    constraints: ['1 <= s.length <= 100', 's contains only digits and may contain leading zero(s).'],
  },
  {
    id: '66',
    title: 'HTTP Headers for Security',
    category: 'Cybersecurity',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'For each of the following security-related HTTP headers, briefly explain its purpose: `Strict-Transport-Security`, `X-Content-Type-Options`, and `X-Frame-Options`.',
    starterCode: {
      python: '# Strict-Transport-Security:\n# \n# X-Content-Type-Options:\n# \n# X-Frame-Options:\n#',
      javascript: '// Strict-Transport-Security:\n// \n// X-Content-Type-Options:\n// \n// X-Frame-Options:\n//',
      java: '// Strict-Transport-Security:\n// \n// X-Content-Type-Options:\n// \n// X-Frame-Options:\n//',
      cpp: '// Strict-Transport-Security:\n// \n// X-Content-Type-Options:\n// \n// X-Frame-Options:\n//',
    },
    examples: [],
    constraints: ['Provide a one or two-sentence explanation for each header in the comments.'],
  },
  {
    id: '67',
    title: 'Simple Linear Regression',
    category: 'AI/ML',
    difficulty: 'Intermediate',
    xp: 200,
    description: 'Implement a simple linear regression model from scratch in Python. Your class should have `fit(X, y)` and `predict(X)` methods. Use the formula-based approach to find the coefficients (slope and intercept).',
    starterCode: {
      python: 'import numpy as np\n\nclass SimpleLinearRegression:\n    def __init__(self):\n        self.slope = None\n        self.intercept = None\n\n    def fit(self, X, y):\n        # Calculate slope (b1) and intercept (b0)\n        # b1 = sum((xi - mean(x)) * (yi - mean(y))) / sum((xi - mean(x))^2)\n        # b0 = mean(y) - b1 * mean(x)\n        pass\n\n    def predict(self, X):\n        # Predict y values using y = b0 + b1*X\n        pass\n',
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['X and y will be numpy arrays.', 'The `fit` method must calculate and store the slope and intercept.'],
  },
  {
    id: '68',
    title: 'Find First and Last Position of Element in Sorted Array',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value. If `target` is not found in the array, return `[-1, -1]`. You must write an algorithm with O(log n) runtime complexity.',
    starterCode: {
      python: 'def search_range(nums, target):\n  # Your code here\n  pass',
      javascript: 'function searchRange(nums, target) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int[] searchRange(int[] nums, int target) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<int> searchRange(vector<int>& nums, int target) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [5,7,7,8,8,10], target = 8', output: '[3,4]' },
      { input: 'nums = [5,7,7,8,8,10], target = 6', output: '[-1,-1]' },
      { input: 'nums = [], target = 0', output: '[-1,-1]' },
    ],
    constraints: ['0 <= nums.length <= 10^5', '-10^9 <= nums[i] <= 10^9', 'nums is a non-decreasing array.', '-10^9 <= target <= 10^9'],
  },
  {
    id: '69',
    title: 'Combination Sum',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given an array of distinct integers `candidates` and a `target` integer, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may return the combinations in any order. The same number may be chosen from `candidates` an unlimited number of times.',
    starterCode: {
      python: 'def combination_sum(candidates, target):\n  # Your code here\n  pass',
      javascript: 'function combinationSum(candidates, target) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<List<Integer>> combinationSum(int[] candidates, int target) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'candidates = [2,3,6,7], target = 7', output: '[[2,2,3],[7]]' },
      { input: 'candidates = [2,3,5], target = 8', output: '[[2,2,2,2],[2,3,3],[3,5]]' },
    ],
    constraints: ['1 <= candidates.length <= 30', '2 <= candidates[i] <= 40', 'All elements of `candidates` are distinct.', '1 <= target <= 40'],
  },
  {
    id: '70',
    title: 'Virtual DOM Diffing Explained',
    category: 'Web Development',
    difficulty: 'Advanced',
    xp: 200,
    description: 'In your own words, explain the concept of Virtual DOM in the context of a library like React. Describe the three main steps of the diffing and reconciliation process.',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: '// 1. The Trigger:\n// What causes a re-render?\n\n// 2. The Diffing:\n// What is compared?\n\n// 3. The Reconciliation:\n// What happens to the actual DOM?',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Your explanation should be clear and concise.', 'Use the comments in the starter code to structure your answer.'],
  },
  {
    id: '71',
    title: 'What are JWTs?',
    category: 'Cybersecurity',
    difficulty: 'Beginner',
    xp: 100,
    description: 'What is a JSON Web Token (JWT)? Describe the three parts of a JWT and what each part contains.',
    starterCode: {
      python: '// 1. Header:\n// \n\n// 2. Payload:\n// \n\n// 3. Signature:\n//',
      javascript: '// 1. Header:\n// \n\n// 2. Payload:\n// \n\n// 3. Signature:\n//',
      java: '// 1. Header:\n// \n\n// 2. Payload:\n// \n\n// 3. Signature:\n//',
      cpp: '// 1. Header:\n// \n\n// 2. Payload:\n// \n\n// 3. Signature:\n//',
    },
    examples: [],
    constraints: ['Provide a brief explanation for each of the three parts of a JWT.'],
  },
  {
    id: '72',
    title: 'One-Hot Encoding',
    category: 'AI/ML',
    difficulty: 'Beginner',
    xp: 125,
    description: 'Implement a function in Python that performs one-hot encoding on a list of categorical labels. The function should take a list of strings and return a dictionary mapping each unique label to its one-hot encoded vector.',
    starterCode: {
      python: 'def one_hot_encode(labels):\n  """\n  Performs one-hot encoding on a list of labels.\n  Example: [\'red\', \'blue\', \'red\'] -> {\'red\': [1, 0], \'blue\': [0, 1]}\n  """\n  # Your code here\n  pass',
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [
      { input: '["cat", "dog", "cat", "mouse"]', output: '{"cat": [1,0,0], "dog": [0,1,0], "mouse": [0,0,1]} (order of vectors may vary)' }
    ],
    constraints: ['The function should first find all unique labels.', 'The length of each vector should equal the number of unique labels.'],
  },
  {
    id: '73',
    title: 'Permutations',
    category: 'Data Structures & Algorithms',
    difficulty: 'Intermediate',
    xp: 175,
    description: 'Given an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order.',
    starterCode: {
      python: 'def permute(nums):\n  # Your code here\n  pass',
      javascript: 'function permute(nums) {\n  // Your code here\n}',
      java: 'class Solution {\n  public List<List<Integer>> permute(int[] nums) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<vector<int>> permute(vector<int>& nums) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,2,3]', output: '[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]' },
      { input: 'nums = [0,1]', output: '[[0,1],[1,0]]' },
    ],
    constraints: ['1 <= nums.length <= 6', '-10 <= nums[i] <= 10', 'All the integers of nums are unique.'],
  },
  {
    id: '74',
    title: 'Event Bubbling and Capturing',
    category: 'Web Development',
    difficulty: 'Intermediate',
    xp: 150,
    description: 'Explain the difference between event bubbling and event capturing in the browser\'s DOM. In which order do they occur? How can you listen for an event in the capturing phase using `addEventListener`?',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: '// Event Bubbling:\n// \n\n// Event Capturing:\n// \n\n// Order of Phases:\n// \n\n// Listening in Capturing Phase:\n//',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Use comments to structure your answer clearly.'],
  },
  {
    id: '75',
    title: 'Same-Origin Policy (SOP)',
    category: 'Cybersecurity',
    difficulty: 'Beginner',
    xp: 125,
    description: 'What is the Same-Origin Policy (SOP)? What three components define an "origin"? How does SOP relate to CORS (Cross-Origin Resource Sharing)?',
    starterCode: {
      python: '// N/A for this challenge',
      javascript: '// SOP Definition:\n// \n\n// Components of an Origin:\n// 1. \n// 2. \n// 3. \n\n// Relation to CORS:\n//',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Provide concise answers for each section in the comments.'],
  },
  {
    id: '76',
    title: 'Activation Functions',
    category: 'AI/ML',
    difficulty: 'Beginner',
    xp: 100,
    description: 'Briefly describe the purpose of an activation function in a neural network. Name and write the formula for two common activation functions (e.g., Sigmoid, ReLU, Tanh).',
    starterCode: {
      python: '# Purpose of Activation Functions:\n# \n\n# Function 1: [Name]\n# Formula: \n\n# Function 2: [Name]\n# Formula:',
      javascript: '// N/A for this challenge',
      java: '// N/A for this challenge',
      cpp: '// N/A for this challenge',
    },
    examples: [],
    constraints: ['Your answer should be in the comments of the Python starter code.'],
  },
  {
    id: '77',
    title: 'Sliding Window Maximum',
    category: 'Data Structures & Algorithms',
    difficulty: 'Expert',
    xp: 275,
    description: 'You are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.',
    starterCode: {
      python: 'def max_sliding_window(nums, k):\n  # Your code here\n  pass',
      javascript: 'function maxSlidingWindow(nums, k) {\n  // Your code here\n}',
      java: 'class Solution {\n  public int[] maxSlidingWindow(int[] nums, int k) {\n    // Your code here\n  }\n}',
      cpp: 'class Solution {\npublic:\n    vector<int> maxSlidingWindow(vector<int>& nums, int k) {\n        // Your code here\n    }\n};',
    },
    examples: [
      { input: 'nums = [1,3,-1,-3,5,3,6,7], k = 3', output: '[3,3,5,5,6,7]' },
      { input: 'nums = [1], k = 1', output: '[1]' },
    ],
    constraints: ['1 <= nums.length <= 10^5', '-10^4 <= nums[i] <= 10^4', '1 <= k <= nums.length'],
  }
];

export const games: Game[] = [
    { id: '1', title: 'Code Rush', description: 'Timed typing game with missing code snippets.', icon: Gamepad2, href: '#' },
    { id: '2', title: 'Code Invaders', description: 'Space Invaders with coding MCQs.', icon: Swords, href: '#' },
    { id: '3', title: 'Debug Tower', description: 'Drag/drop fixes into a buggy code tower.', icon: Puzzle, href: '#' },
    { id: '4', title: 'Monster Battle', description: 'RPG fight with coding questions.', icon: Shield, href: '#' },
    { id: '5', title: 'Code Dungeon', description: 'Dungeon crawler with coding puzzles.', icon: Castle, href: '#' },
];
